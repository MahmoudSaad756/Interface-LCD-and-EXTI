
LCDPro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000309c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000309c  00003110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002328  00000000  00000000  00003148  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000db5  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00006225  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006385  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008559  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000965a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000aa1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b2ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <__vector_1>
       8:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__vector_2>
       c:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__vector_3>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <main>
      7a:	0c 94 4c 18 	jmp	0x3098	; 0x3098 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 15 18 	jmp	0x302a	; 0x302a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e8       	ldi	r26, 0x84	; 132
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 15 18 	jmp	0x302a	; 0x302a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e8       	ldi	r24, 0x84	; 132
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	64 e8       	ldi	r22, 0x84	; 132
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 21 18 	jmp	0x3042	; 0x3042 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 25 18 	jmp	0x304a	; 0x304a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 41 18 	jmp	0x3082	; 0x3082 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <GEI_voidEnable>:
#include "EXT_private.h"



void GEI_voidEnable (void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,7);
     c96:	af e5       	ldi	r26, 0x5F	; 95
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	ef e5       	ldi	r30, 0x5F	; 95
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	8c 93       	st	X, r24

}
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <GEI_voidDisable>:
void GEI_voidDisable(void)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     cb2:	af e5       	ldi	r26, 0x5F	; 95
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ef e5       	ldi	r30, 0x5F	; 95
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 77       	andi	r24, 0x7F	; 127
     cbe:	8c 93       	st	X, r24
}
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <EXT_voidEnable_EXT_0>:


void EXT_voidEnable_EXT_0 ( u8 COPY_u8Mode )
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <EXT_voidEnable_EXT_0+0x6>
     ccc:	0f 92       	push	r0
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR,6);
     cd4:	ab e5       	ldi	r26, 0x5B	; 91
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	eb e5       	ldi	r30, 0x5B	; 91
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	80 64       	ori	r24, 0x40	; 64
     ce0:	8c 93       	st	X, r24
	switch( COPY_u8Mode )
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	3b 83       	std	Y+3, r19	; 0x03
     cea:	2a 83       	std	Y+2, r18	; 0x02
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	9b 81       	ldd	r25, Y+3	; 0x03
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	91 05       	cpc	r25, r1
     cf4:	21 f1       	breq	.+72     	; 0xd3e <EXT_voidEnable_EXT_0+0x78>
     cf6:	2a 81       	ldd	r18, Y+2	; 0x02
     cf8:	3b 81       	ldd	r19, Y+3	; 0x03
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	31 05       	cpc	r19, r1
     cfe:	2c f4       	brge	.+10     	; 0xd0a <EXT_voidEnable_EXT_0+0x44>
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	61 f0       	breq	.+24     	; 0xd20 <EXT_voidEnable_EXT_0+0x5a>
     d08:	46 c0       	rjmp	.+140    	; 0xd96 <EXT_voidEnable_EXT_0+0xd0>
     d0a:	2a 81       	ldd	r18, Y+2	; 0x02
     d0c:	3b 81       	ldd	r19, Y+3	; 0x03
     d0e:	22 30       	cpi	r18, 0x02	; 2
     d10:	31 05       	cpc	r19, r1
     d12:	21 f1       	breq	.+72     	; 0xd5c <EXT_voidEnable_EXT_0+0x96>
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	9b 81       	ldd	r25, Y+3	; 0x03
     d18:	83 30       	cpi	r24, 0x03	; 3
     d1a:	91 05       	cpc	r25, r1
     d1c:	71 f1       	breq	.+92     	; 0xd7a <EXT_voidEnable_EXT_0+0xb4>
     d1e:	3b c0       	rjmp	.+118    	; 0xd96 <EXT_voidEnable_EXT_0+0xd0>
	{
		case Low_level   : CLR_BIT(MCUCR ,0); CLR_BIT(MCUCR ,1); break;
     d20:	a5 e5       	ldi	r26, 0x55	; 85
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e5 e5       	ldi	r30, 0x55	; 85
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8e 7f       	andi	r24, 0xFE	; 254
     d2c:	8c 93       	st	X, r24
     d2e:	a5 e5       	ldi	r26, 0x55	; 85
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e5       	ldi	r30, 0x55	; 85
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8d 7f       	andi	r24, 0xFD	; 253
     d3a:	8c 93       	st	X, r24
     d3c:	2c c0       	rjmp	.+88     	; 0xd96 <EXT_voidEnable_EXT_0+0xd0>
		case Any_change  : SET_BIT(MCUCR ,0); CLR_BIT(MCUCR ,1); break;
     d3e:	a5 e5       	ldi	r26, 0x55	; 85
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e5 e5       	ldi	r30, 0x55	; 85
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	8c 93       	st	X, r24
     d4c:	a5 e5       	ldi	r26, 0x55	; 85
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e5       	ldi	r30, 0x55	; 85
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8d 7f       	andi	r24, 0xFD	; 253
     d58:	8c 93       	st	X, r24
     d5a:	1d c0       	rjmp	.+58     	; 0xd96 <EXT_voidEnable_EXT_0+0xd0>
		case Falling_Edge: CLR_BIT(MCUCR ,0); SET_BIT(MCUCR ,1); break;
     d5c:	a5 e5       	ldi	r26, 0x55	; 85
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e5 e5       	ldi	r30, 0x55	; 85
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8e 7f       	andi	r24, 0xFE	; 254
     d68:	8c 93       	st	X, r24
     d6a:	a5 e5       	ldi	r26, 0x55	; 85
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e5       	ldi	r30, 0x55	; 85
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	82 60       	ori	r24, 0x02	; 2
     d76:	8c 93       	st	X, r24
     d78:	0e c0       	rjmp	.+28     	; 0xd96 <EXT_voidEnable_EXT_0+0xd0>
		case Rising_Edge : SET_BIT(MCUCR ,0); SET_BIT(MCUCR ,1); break;
     d7a:	a5 e5       	ldi	r26, 0x55	; 85
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e5 e5       	ldi	r30, 0x55	; 85
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	81 60       	ori	r24, 0x01	; 1
     d86:	8c 93       	st	X, r24
     d88:	a5 e5       	ldi	r26, 0x55	; 85
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e5 e5       	ldi	r30, 0x55	; 85
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	82 60       	ori	r24, 0x02	; 2
     d94:	8c 93       	st	X, r24

	}

}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <EXT_voidEnable_EXT_1>:
void EXT_voidEnable_EXT_1 ( u8 COPY_u8Mode )
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	00 d0       	rcall	.+0      	; 0xda8 <EXT_voidEnable_EXT_1+0x6>
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR , 7);
     db0:	ab e5       	ldi	r26, 0x5B	; 91
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	eb e5       	ldi	r30, 0x5B	; 91
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	8c 93       	st	X, r24
	switch( COPY_u8Mode )
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3b 83       	std	Y+3, r19	; 0x03
     dc6:	2a 83       	std	Y+2, r18	; 0x02
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	9b 81       	ldd	r25, Y+3	; 0x03
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	21 f1       	breq	.+72     	; 0xe1a <EXT_voidEnable_EXT_1+0x78>
     dd2:	2a 81       	ldd	r18, Y+2	; 0x02
     dd4:	3b 81       	ldd	r19, Y+3	; 0x03
     dd6:	22 30       	cpi	r18, 0x02	; 2
     dd8:	31 05       	cpc	r19, r1
     dda:	2c f4       	brge	.+10     	; 0xde6 <EXT_voidEnable_EXT_1+0x44>
     ddc:	8a 81       	ldd	r24, Y+2	; 0x02
     dde:	9b 81       	ldd	r25, Y+3	; 0x03
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	61 f0       	breq	.+24     	; 0xdfc <EXT_voidEnable_EXT_1+0x5a>
     de4:	46 c0       	rjmp	.+140    	; 0xe72 <EXT_voidEnable_EXT_1+0xd0>
     de6:	2a 81       	ldd	r18, Y+2	; 0x02
     de8:	3b 81       	ldd	r19, Y+3	; 0x03
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	21 f1       	breq	.+72     	; 0xe38 <EXT_voidEnable_EXT_1+0x96>
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	9b 81       	ldd	r25, Y+3	; 0x03
     df4:	83 30       	cpi	r24, 0x03	; 3
     df6:	91 05       	cpc	r25, r1
     df8:	71 f1       	breq	.+92     	; 0xe56 <EXT_voidEnable_EXT_1+0xb4>
     dfa:	3b c0       	rjmp	.+118    	; 0xe72 <EXT_voidEnable_EXT_1+0xd0>
	{
		case Low_level   : CLR_BIT(MCUCR , 2); CLR_BIT(MCUCR , 3); break;
     dfc:	a5 e5       	ldi	r26, 0x55	; 85
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e5       	ldi	r30, 0x55	; 85
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8b 7f       	andi	r24, 0xFB	; 251
     e08:	8c 93       	st	X, r24
     e0a:	a5 e5       	ldi	r26, 0x55	; 85
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e5 e5       	ldi	r30, 0x55	; 85
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	87 7f       	andi	r24, 0xF7	; 247
     e16:	8c 93       	st	X, r24
     e18:	2c c0       	rjmp	.+88     	; 0xe72 <EXT_voidEnable_EXT_1+0xd0>
		case Any_change  : SET_BIT(MCUCR , 2); CLR_BIT(MCUCR , 3); break;
     e1a:	a5 e5       	ldi	r26, 0x55	; 85
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e5       	ldi	r30, 0x55	; 85
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	8c 93       	st	X, r24
     e28:	a5 e5       	ldi	r26, 0x55	; 85
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e5       	ldi	r30, 0x55	; 85
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	87 7f       	andi	r24, 0xF7	; 247
     e34:	8c 93       	st	X, r24
     e36:	1d c0       	rjmp	.+58     	; 0xe72 <EXT_voidEnable_EXT_1+0xd0>
		case Falling_Edge: CLR_BIT(MCUCR , 2); SET_BIT(MCUCR , 3); break;
     e38:	a5 e5       	ldi	r26, 0x55	; 85
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e5       	ldi	r30, 0x55	; 85
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8b 7f       	andi	r24, 0xFB	; 251
     e44:	8c 93       	st	X, r24
     e46:	a5 e5       	ldi	r26, 0x55	; 85
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e5 e5       	ldi	r30, 0x55	; 85
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	8c 93       	st	X, r24
     e54:	0e c0       	rjmp	.+28     	; 0xe72 <EXT_voidEnable_EXT_1+0xd0>
		case Rising_Edge : SET_BIT(MCUCR , 2); SET_BIT(MCUCR , 3); break;
     e56:	a5 e5       	ldi	r26, 0x55	; 85
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e5 e5       	ldi	r30, 0x55	; 85
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	84 60       	ori	r24, 0x04	; 4
     e62:	8c 93       	st	X, r24
     e64:	a5 e5       	ldi	r26, 0x55	; 85
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e5       	ldi	r30, 0x55	; 85
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 60       	ori	r24, 0x08	; 8
     e70:	8c 93       	st	X, r24

	}

}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <EXT_voidEnable_EXT_2>:
void EXT_voidEnable_EXT_2 ( u8 COPY_u8Mode )
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <EXT_voidEnable_EXT_2+0x6>
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(GICR , 5);
     e8c:	ab e5       	ldi	r26, 0x5B	; 91
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	eb e5       	ldi	r30, 0x5B	; 91
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	8c 93       	st	X, r24
	switch( COPY_u8Mode )
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3b 83       	std	Y+3, r19	; 0x03
     ea2:	2a 83       	std	Y+2, r18	; 0x02
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	9b 81       	ldd	r25, Y+3	; 0x03
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	91 05       	cpc	r25, r1
     eac:	31 f0       	breq	.+12     	; 0xeba <EXT_voidEnable_EXT_2+0x3c>
     eae:	2a 81       	ldd	r18, Y+2	; 0x02
     eb0:	3b 81       	ldd	r19, Y+3	; 0x03
     eb2:	23 30       	cpi	r18, 0x03	; 3
     eb4:	31 05       	cpc	r19, r1
     eb6:	49 f0       	breq	.+18     	; 0xeca <EXT_voidEnable_EXT_2+0x4c>
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <EXT_voidEnable_EXT_2+0x5a>
	{
		case Falling_Edge: CLR_BIT(MCUCSR , 6);  break;
     eba:	a4 e5       	ldi	r26, 0x54	; 84
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e4 e5       	ldi	r30, 0x54	; 84
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 7b       	andi	r24, 0xBF	; 191
     ec6:	8c 93       	st	X, r24
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <EXT_voidEnable_EXT_2+0x5a>
		case Rising_Edge : SET_BIT(MCUCSR , 6);  break;
     eca:	a4 e5       	ldi	r26, 0x54	; 84
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e4 e5       	ldi	r30, 0x54	; 84
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	8c 93       	st	X, r24

		default : break;
	}

}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <EXT_voidDisable_EXT_0>:

void EXT_voidDisable_EXT_0(void)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,6);
     eec:	ab e5       	ldi	r26, 0x5B	; 91
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	eb e5       	ldi	r30, 0x5B	; 91
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 7b       	andi	r24, 0xBF	; 191
     ef8:	8c 93       	st	X, r24
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <EXT_voidDisable_EXT_1>:
void EXT_voidDisable_EXT_1(void)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,7);
     f08:	ab e5       	ldi	r26, 0x5B	; 91
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e5       	ldi	r30, 0x5B	; 91
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	8f 77       	andi	r24, 0x7F	; 127
     f14:	8c 93       	st	X, r24
}
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <EXT_voidDisable_EXT_2>:
void EXT_voidDisable_EXT_2(void)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,5);
     f24:	ab e5       	ldi	r26, 0x5B	; 91
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	eb e5       	ldi	r30, 0x5B	; 91
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 7d       	andi	r24, 0xDF	; 223
     f30:	8c 93       	st	X, r24
}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <EXT_voidCLRFlag_EXT_0>:

void EXT_voidCLRFlag_EXT_0(void)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR , 6);
     f40:	aa e5       	ldi	r26, 0x5A	; 90
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e5       	ldi	r30, 0x5A	; 90
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	8c 93       	st	X, r24
}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	08 95       	ret

00000f54 <EXT_voidCLRFlag_EXT_1>:
void EXT_voidCLRFlag_EXT_1(void)
{
     f54:	df 93       	push	r29
     f56:	cf 93       	push	r28
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR , 7);
     f5c:	aa e5       	ldi	r26, 0x5A	; 90
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	ea e5       	ldi	r30, 0x5A	; 90
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	8c 93       	st	X, r24
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <EXT_voidCLRFlag_EXT_2>:
void EXT_voidCLRFlag_EXT_2(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GIFR , 5);
     f78:	aa e5       	ldi	r26, 0x5A	; 90
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ea e5       	ldi	r30, 0x5A	; 90
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	8c 93       	st	X, r24
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <DIO_voidSetPortDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_voidSetPortDirection(u8 COPY_u8Port, u8 COPY_u8Direction)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	00 d0       	rcall	.+0      	; 0xf92 <DIO_voidSetPortDirection+0x6>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <DIO_voidSetPortDirection+0x8>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	6a 83       	std	Y+2, r22	; 0x02

	switch (COPY_u8Port) {
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3c 83       	std	Y+4, r19	; 0x04
     fa4:	2b 83       	std	Y+3, r18	; 0x03
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	89 f1       	breq	.+98     	; 0x1012 <DIO_voidSetPortDirection+0x86>
     fb0:	2b 81       	ldd	r18, Y+3	; 0x03
     fb2:	3c 81       	ldd	r19, Y+4	; 0x04
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <DIO_voidSetPortDirection+0x38>
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	69 f0       	breq	.+26     	; 0xfdc <DIO_voidSetPortDirection+0x50>
     fc2:	74 c0       	rjmp	.+232    	; 0x10ac <DIO_voidSetPortDirection+0x120>
     fc4:	2b 81       	ldd	r18, Y+3	; 0x03
     fc6:	3c 81       	ldd	r19, Y+4	; 0x04
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	e1 f1       	breq	.+120    	; 0x1046 <DIO_voidSetPortDirection+0xba>
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	83 30       	cpi	r24, 0x03	; 3
     fd4:	91 05       	cpc	r25, r1
     fd6:	09 f4       	brne	.+2      	; 0xfda <DIO_voidSetPortDirection+0x4e>
     fd8:	50 c0       	rjmp	.+160    	; 0x107a <DIO_voidSetPortDirection+0xee>
     fda:	68 c0       	rjmp	.+208    	; 0x10ac <DIO_voidSetPortDirection+0x120>
	case DIO_PortA:
		if (COPY_u8Direction == Output)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	29 f4       	brne	.+10     	; 0xfec <DIO_voidSetPortDirection+0x60>
			DDRA = 0xff;
     fe2:	ea e3       	ldi	r30, 0x3A	; 58
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	80 83       	st	Z, r24
     fea:	60 c0       	rjmp	.+192    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	88 23       	and	r24, r24
     ff0:	21 f4       	brne	.+8      	; 0xffa <DIO_voidSetPortDirection+0x6e>
			DDRA = 0x00;
     ff2:	ea e3       	ldi	r30, 0x3A	; 58
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	10 82       	st	Z, r1
     ff8:	59 c0       	rjmp	.+178    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	09 f0       	breq	.+2      	; 0x1002 <DIO_voidSetPortDirection+0x76>
    1000:	55 c0       	rjmp	.+170    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		{
			DDRA = 0x00;
    1002:	ea e3       	ldi	r30, 0x3A	; 58
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	10 82       	st	Z, r1
			PORTA = 0xff;
    1008:	eb e3       	ldi	r30, 0x3B	; 59
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	80 83       	st	Z, r24
    1010:	4d c0       	rjmp	.+154    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		}

		break;

	case DIO_PortB:
		if (COPY_u8Direction == Output)
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	29 f4       	brne	.+10     	; 0x1022 <DIO_voidSetPortDirection+0x96>
			DDRB = 0xff;
    1018:	e7 e3       	ldi	r30, 0x37	; 55
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	80 83       	st	Z, r24
    1020:	45 c0       	rjmp	.+138    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	88 23       	and	r24, r24
    1026:	21 f4       	brne	.+8      	; 0x1030 <DIO_voidSetPortDirection+0xa4>
			DDRB = 0x00;
    1028:	e7 e3       	ldi	r30, 0x37	; 55
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	10 82       	st	Z, r1
    102e:	3e c0       	rjmp	.+124    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	d9 f5       	brne	.+118    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		{
			DDRB = 0x00;
    1036:	e7 e3       	ldi	r30, 0x37	; 55
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	10 82       	st	Z, r1
			PORTB = 0xff;
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	80 83       	st	Z, r24
    1044:	33 c0       	rjmp	.+102    	; 0x10ac <DIO_voidSetPortDirection+0x120>
		}

		break;
	case DIO_PortC:
		if (COPY_u8Direction == Output)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	29 f4       	brne	.+10     	; 0x1056 <DIO_voidSetPortDirection+0xca>
			DDRC = 0xff;
    104c:	e4 e3       	ldi	r30, 0x34	; 52
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	80 83       	st	Z, r24
    1054:	2b c0       	rjmp	.+86     	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	88 23       	and	r24, r24
    105a:	21 f4       	brne	.+8      	; 0x1064 <DIO_voidSetPortDirection+0xd8>
			DDRC = 0x00;
    105c:	e4 e3       	ldi	r30, 0x34	; 52
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	10 82       	st	Z, r1
    1062:	24 c0       	rjmp	.+72     	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	09 f5       	brne	.+66     	; 0x10ac <DIO_voidSetPortDirection+0x120>
		{
			DDRC  = 0x00;
    106a:	e4 e3       	ldi	r30, 0x34	; 52
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	10 82       	st	Z, r1
			PORTC = 0xff;
    1070:	e5 e3       	ldi	r30, 0x35	; 53
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	80 83       	st	Z, r24
    1078:	19 c0       	rjmp	.+50     	; 0x10ac <DIO_voidSetPortDirection+0x120>
		}
		break;
	case DIO_PortD:
		if (COPY_u8Direction == Output)
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	29 f4       	brne	.+10     	; 0x108a <DIO_voidSetPortDirection+0xfe>
			DDRD = 0xff;
    1080:	e1 e3       	ldi	r30, 0x31	; 49
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	80 83       	st	Z, r24
    1088:	11 c0       	rjmp	.+34     	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input)
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	88 23       	and	r24, r24
    108e:	21 f4       	brne	.+8      	; 0x1098 <DIO_voidSetPortDirection+0x10c>
			DDRD = 0x00;
    1090:	e1 e3       	ldi	r30, 0x31	; 49
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	10 82       	st	Z, r1
    1096:	0a c0       	rjmp	.+20     	; 0x10ac <DIO_voidSetPortDirection+0x120>
		else if (COPY_u8Direction == Input_Pullup)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	39 f4       	brne	.+14     	; 0x10ac <DIO_voidSetPortDirection+0x120>
		{
			DDRD  = 0x00;
    109e:	e1 e3       	ldi	r30, 0x31	; 49
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	10 82       	st	Z, r1
			PORTD = 0xff;
    10a4:	e2 e3       	ldi	r30, 0x32	; 50
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	8f ef       	ldi	r24, 0xFF	; 255
    10aa:	80 83       	st	Z, r24
		}

		break;
	}

}
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 COPY_u8Port, u8 COPY_u8Value)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <DIO_voidSetPortValue+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <DIO_voidSetPortValue+0x8>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	6a 83       	std	Y+2, r22	; 0x02

	switch (COPY_u8Port) {
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	3c 83       	std	Y+4, r19	; 0x04
    10d2:	2b 83       	std	Y+3, r18	; 0x03
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 05       	cpc	r25, r1
    10dc:	d1 f0       	breq	.+52     	; 0x1112 <DIO_voidSetPortValue+0x58>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <DIO_voidSetPortValue+0x38>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	61 f0       	breq	.+24     	; 0x1108 <DIO_voidSetPortValue+0x4e>
    10f0:	1e c0       	rjmp	.+60     	; 0x112e <DIO_voidSetPortValue+0x74>
    10f2:	2b 81       	ldd	r18, Y+3	; 0x03
    10f4:	3c 81       	ldd	r19, Y+4	; 0x04
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	81 f0       	breq	.+32     	; 0x111c <DIO_voidSetPortValue+0x62>
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	81 f0       	breq	.+32     	; 0x1126 <DIO_voidSetPortValue+0x6c>
    1106:	13 c0       	rjmp	.+38     	; 0x112e <DIO_voidSetPortValue+0x74>
	case DIO_PortA:
		PORTA = COPY_u8Value;
    1108:	eb e3       	ldi	r30, 0x3B	; 59
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
    1110:	0e c0       	rjmp	.+28     	; 0x112e <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PortB:
		PORTA = COPY_u8Value;
    1112:	eb e3       	ldi	r30, 0x3B	; 59
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	80 83       	st	Z, r24
    111a:	09 c0       	rjmp	.+18     	; 0x112e <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PortC:
		PORTA = COPY_u8Value;
    111c:	eb e3       	ldi	r30, 0x3B	; 59
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	80 83       	st	Z, r24
    1124:	04 c0       	rjmp	.+8      	; 0x112e <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PortD:
		PORTA = COPY_u8Value;
    1126:	eb e3       	ldi	r30, 0x3B	; 59
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	80 83       	st	Z, r24
		break;
	}

}
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_voidSetPinDirection>:

void DIO_voidSetPinDirection(u8 COPY_u8Port, u8 COPY_u8PinNumber,u8 COPY_u8Direction)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	29 97       	sbiw	r28, 0x09	; 9
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	6a 83       	std	Y+2, r22	; 0x02
    1154:	4b 83       	std	Y+3, r20	; 0x03

	if (COPY_u8Direction == Output)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	09 f0       	breq	.+2      	; 0x115e <DIO_voidSetPinDirection+0x22>
    115c:	6f c0       	rjmp	.+222    	; 0x123c <DIO_voidSetPinDirection+0x100>
	{
		switch (COPY_u8Port) {
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	39 87       	std	Y+9, r19	; 0x09
    1166:	28 87       	std	Y+8, r18	; 0x08
    1168:	88 85       	ldd	r24, Y+8	; 0x08
    116a:	99 85       	ldd	r25, Y+9	; 0x09
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	49 f1       	breq	.+82     	; 0x11c4 <DIO_voidSetPinDirection+0x88>
    1172:	28 85       	ldd	r18, Y+8	; 0x08
    1174:	39 85       	ldd	r19, Y+9	; 0x09
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <DIO_voidSetPinDirection+0x4a>
    117c:	88 85       	ldd	r24, Y+8	; 0x08
    117e:	99 85       	ldd	r25, Y+9	; 0x09
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	61 f0       	breq	.+24     	; 0x119c <DIO_voidSetPinDirection+0x60>
    1184:	90 c1       	rjmp	.+800    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
    1186:	28 85       	ldd	r18, Y+8	; 0x08
    1188:	39 85       	ldd	r19, Y+9	; 0x09
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	71 f1       	breq	.+92     	; 0x11ec <DIO_voidSetPinDirection+0xb0>
    1190:	88 85       	ldd	r24, Y+8	; 0x08
    1192:	99 85       	ldd	r25, Y+9	; 0x09
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	e9 f1       	breq	.+122    	; 0x1214 <DIO_voidSetPinDirection+0xd8>
    119a:	85 c1       	rjmp	.+778    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
		case DIO_PortA:
			SET_BIT(DDRA, COPY_u8PinNumber);
    119c:	aa e3       	ldi	r26, 0x3A	; 58
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ea e3       	ldi	r30, 0x3A	; 58
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_voidSetPinDirection+0x7e>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_voidSetPinDirection+0x7a>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	71 c1       	rjmp	.+738    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortB:
			SET_BIT(DDRB, COPY_u8PinNumber);
    11c4:	a7 e3       	ldi	r26, 0x37	; 55
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e7 e3       	ldi	r30, 0x37	; 55
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_voidSetPinDirection+0xa6>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_voidSetPinDirection+0xa2>
    11e6:	84 2b       	or	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	5d c1       	rjmp	.+698    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortC:
			SET_BIT(DDRC, COPY_u8PinNumber);
    11ec:	a4 e3       	ldi	r26, 0x34	; 52
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e4 e3       	ldi	r30, 0x34	; 52
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_voidSetPinDirection+0xce>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_voidSetPinDirection+0xca>
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
    1212:	49 c1       	rjmp	.+658    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortD:
			SET_BIT(DDRD, COPY_u8PinNumber);
    1214:	a1 e3       	ldi	r26, 0x31	; 49
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e1 e3       	ldi	r30, 0x31	; 49
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <DIO_voidSetPinDirection+0xf6>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <DIO_voidSetPinDirection+0xf2>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	35 c1       	rjmp	.+618    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		}

	}
	else if( COPY_u8Direction == Input_Pullup )
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	09 f0       	breq	.+2      	; 0x1244 <DIO_voidSetPinDirection+0x108>
    1242:	be c0       	rjmp	.+380    	; 0x13c0 <DIO_voidSetPinDirection+0x284>
	{
		switch (COPY_u8Port)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3f 83       	std	Y+7, r19	; 0x07
    124c:	2e 83       	std	Y+6, r18	; 0x06
    124e:	8e 81       	ldd	r24, Y+6	; 0x06
    1250:	9f 81       	ldd	r25, Y+7	; 0x07
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <DIO_voidSetPinDirection+0x11e>
    1258:	3e c0       	rjmp	.+124    	; 0x12d6 <DIO_voidSetPinDirection+0x19a>
    125a:	2e 81       	ldd	r18, Y+6	; 0x06
    125c:	3f 81       	ldd	r19, Y+7	; 0x07
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	2c f4       	brge	.+10     	; 0x126e <DIO_voidSetPinDirection+0x132>
    1264:	8e 81       	ldd	r24, Y+6	; 0x06
    1266:	9f 81       	ldd	r25, Y+7	; 0x07
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	71 f0       	breq	.+28     	; 0x1288 <DIO_voidSetPinDirection+0x14c>
    126c:	1c c1       	rjmp	.+568    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
    126e:	2e 81       	ldd	r18, Y+6	; 0x06
    1270:	3f 81       	ldd	r19, Y+7	; 0x07
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <DIO_voidSetPinDirection+0x13e>
    1278:	55 c0       	rjmp	.+170    	; 0x1324 <DIO_voidSetPinDirection+0x1e8>
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	9f 81       	ldd	r25, Y+7	; 0x07
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <DIO_voidSetPinDirection+0x14a>
    1284:	76 c0       	rjmp	.+236    	; 0x1372 <DIO_voidSetPinDirection+0x236>
    1286:	0f c1       	rjmp	.+542    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
		{
		case DIO_PortA:
			CLR_BIT(DDRA , COPY_u8PinNumber);
    1288:	aa e3       	ldi	r26, 0x3A	; 58
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ea e3       	ldi	r30, 0x3A	; 58
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <DIO_voidSetPinDirection+0x168>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	2a 95       	dec	r18
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <DIO_voidSetPinDirection+0x164>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8c 93       	st	X, r24
			SET_BIT(PORTA, COPY_u8PinNumber);
    12ae:	ab e3       	ldi	r26, 0x3B	; 59
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	eb e3       	ldi	r30, 0x3B	; 59
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_voidSetPinDirection+0x190>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_voidSetPinDirection+0x18c>
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	e8 c0       	rjmp	.+464    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortB:
			CLR_BIT(DDRB , COPY_u8PinNumber);
    12d6:	a7 e3       	ldi	r26, 0x37	; 55
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e7 e3       	ldi	r30, 0x37	; 55
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_voidSetPinDirection+0x1b6>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	2a 95       	dec	r18
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_voidSetPinDirection+0x1b2>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
			SET_BIT(PORTB, COPY_u8PinNumber);
    12fc:	a8 e3       	ldi	r26, 0x38	; 56
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e8 e3       	ldi	r30, 0x38	; 56
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_voidSetPinDirection+0x1de>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_voidSetPinDirection+0x1da>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	c1 c0       	rjmp	.+386    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortC:
			CLR_BIT(DDRC , COPY_u8PinNumber);
    1324:	a4 e3       	ldi	r26, 0x34	; 52
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_voidSetPinDirection+0x204>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	2a 95       	dec	r18
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_voidSetPinDirection+0x200>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
			SET_BIT(PORTC, COPY_u8PinNumber);
    134a:	a5 e3       	ldi	r26, 0x35	; 53
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_voidSetPinDirection+0x22c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_voidSetPinDirection+0x228>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	9a c0       	rjmp	.+308    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		case DIO_PortD:
			CLR_BIT(DDRD , COPY_u8PinNumber);
    1372:	a1 e3       	ldi	r26, 0x31	; 49
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e1 e3       	ldi	r30, 0x31	; 49
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_voidSetPinDirection+0x252>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	2a 95       	dec	r18
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_voidSetPinDirection+0x24e>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	8c 93       	st	X, r24
			SET_BIT(PORTD, COPY_u8PinNumber);
    1398:	a2 e3       	ldi	r26, 0x32	; 50
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e2 e3       	ldi	r30, 0x32	; 50
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_voidSetPinDirection+0x27a>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_voidSetPinDirection+0x276>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	73 c0       	rjmp	.+230    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			break;
		}
	}
	else
		{
			switch (COPY_u8Port)
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3d 83       	std	Y+5, r19	; 0x05
    13c8:	2c 83       	std	Y+4, r18	; 0x04
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	59 f1       	breq	.+86     	; 0x142a <DIO_voidSetPinDirection+0x2ee>
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	3d 81       	ldd	r19, Y+5	; 0x05
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <DIO_voidSetPinDirection+0x2ac>
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	69 f0       	breq	.+26     	; 0x1400 <DIO_voidSetPinDirection+0x2c4>
    13e6:	5f c0       	rjmp	.+190    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
    13e8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ea:	3d 81       	ldd	r19, Y+5	; 0x05
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	89 f1       	breq	.+98     	; 0x1454 <DIO_voidSetPinDirection+0x318>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_voidSetPinDirection+0x2c2>
    13fc:	40 c0       	rjmp	.+128    	; 0x147e <DIO_voidSetPinDirection+0x342>
    13fe:	53 c0       	rjmp	.+166    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
			{
			case DIO_PortA:
				CLR_BIT(DDRA, COPY_u8PinNumber);
    1400:	aa e3       	ldi	r26, 0x3A	; 58
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ea e3       	ldi	r30, 0x3A	; 58
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 2e       	mov	r0, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_voidSetPinDirection+0x2e2>
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	0a 94       	dec	r0
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_voidSetPinDirection+0x2de>
    1422:	80 95       	com	r24
    1424:	84 23       	and	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	3e c0       	rjmp	.+124    	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
				break;
			case DIO_PortB:
				CLR_BIT(DDRB, COPY_u8PinNumber);
    142a:	a7 e3       	ldi	r26, 0x37	; 55
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e7 e3       	ldi	r30, 0x37	; 55
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_voidSetPinDirection+0x30c>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_voidSetPinDirection+0x308>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	29 c0       	rjmp	.+82     	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
				break;
			case DIO_PortC:
				CLR_BIT(DDRC, COPY_u8PinNumber);
    1454:	a4 e3       	ldi	r26, 0x34	; 52
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e4 e3       	ldi	r30, 0x34	; 52
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_voidSetPinDirection+0x336>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_voidSetPinDirection+0x332>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <DIO_voidSetPinDirection+0x36a>
				break;
			case DIO_PortD:
				CLR_BIT(DDRD, COPY_u8PinNumber);
    147e:	a1 e3       	ldi	r26, 0x31	; 49
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e1 e3       	ldi	r30, 0x31	; 49
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_voidSetPinDirection+0x360>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_voidSetPinDirection+0x35c>
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	8c 93       	st	X, r24
				break;
			}
		}

}
    14a6:	29 96       	adiw	r28, 0x09	; 9
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 COPY_u8Port, u8 COPY_u8PinNumber, u8 COPY_u8Value)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	27 97       	sbiw	r28, 0x07	; 7
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	6a 83       	std	Y+2, r22	; 0x02
    14d0:	4b 83       	std	Y+3, r20	; 0x03

	if (COPY_u8Value == High) {
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	09 f0       	breq	.+2      	; 0x14da <DIO_voidSetPinValue+0x22>
    14d8:	6f c0       	rjmp	.+222    	; 0x15b8 <DIO_voidSetPinValue+0x100>
		switch (COPY_u8Port) {
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	3f 83       	std	Y+7, r19	; 0x07
    14e2:	2e 83       	std	Y+6, r18	; 0x06
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	9f 81       	ldd	r25, Y+7	; 0x07
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	91 05       	cpc	r25, r1
    14ec:	49 f1       	breq	.+82     	; 0x1540 <DIO_voidSetPinValue+0x88>
    14ee:	2e 81       	ldd	r18, Y+6	; 0x06
    14f0:	3f 81       	ldd	r19, Y+7	; 0x07
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	2c f4       	brge	.+10     	; 0x1502 <DIO_voidSetPinValue+0x4a>
    14f8:	8e 81       	ldd	r24, Y+6	; 0x06
    14fa:	9f 81       	ldd	r25, Y+7	; 0x07
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	61 f0       	breq	.+24     	; 0x1518 <DIO_voidSetPinValue+0x60>
    1500:	ce c0       	rjmp	.+412    	; 0x169e <DIO_voidSetPinValue+0x1e6>
    1502:	2e 81       	ldd	r18, Y+6	; 0x06
    1504:	3f 81       	ldd	r19, Y+7	; 0x07
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	71 f1       	breq	.+92     	; 0x1568 <DIO_voidSetPinValue+0xb0>
    150c:	8e 81       	ldd	r24, Y+6	; 0x06
    150e:	9f 81       	ldd	r25, Y+7	; 0x07
    1510:	83 30       	cpi	r24, 0x03	; 3
    1512:	91 05       	cpc	r25, r1
    1514:	e9 f1       	breq	.+122    	; 0x1590 <DIO_voidSetPinValue+0xd8>
    1516:	c3 c0       	rjmp	.+390    	; 0x169e <DIO_voidSetPinValue+0x1e6>
		case DIO_PortA:
			SET_BIT(PORTA, COPY_u8PinNumber);
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_voidSetPinValue+0x7e>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_voidSetPinValue+0x7a>
    153a:	84 2b       	or	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	af c0       	rjmp	.+350    	; 0x169e <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortB:
			SET_BIT(PORTB, COPY_u8PinNumber);
    1540:	a8 e3       	ldi	r26, 0x38	; 56
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e8 e3       	ldi	r30, 0x38	; 56
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_voidSetPinValue+0xa6>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_voidSetPinValue+0xa2>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	9b c0       	rjmp	.+310    	; 0x169e <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortC:
			SET_BIT(PORTC, COPY_u8PinNumber);
    1568:	a5 e3       	ldi	r26, 0x35	; 53
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e5 e3       	ldi	r30, 0x35	; 53
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_voidSetPinValue+0xce>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_voidSetPinValue+0xca>
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
    158e:	87 c0       	rjmp	.+270    	; 0x169e <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortD:
			SET_BIT(PORTD, COPY_u8PinNumber);
    1590:	a2 e3       	ldi	r26, 0x32	; 50
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e2 e3       	ldi	r30, 0x32	; 50
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	02 2e       	mov	r0, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_voidSetPinValue+0xf6>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	0a 94       	dec	r0
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_voidSetPinValue+0xf2>
    15b2:	84 2b       	or	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	73 c0       	rjmp	.+230    	; 0x169e <DIO_voidSetPinValue+0x1e6>
			break;
		}

	} else {
		switch (COPY_u8Port) {
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3d 83       	std	Y+5, r19	; 0x05
    15c0:	2c 83       	std	Y+4, r18	; 0x04
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	59 f1       	breq	.+86     	; 0x1622 <DIO_voidSetPinValue+0x16a>
    15cc:	2c 81       	ldd	r18, Y+4	; 0x04
    15ce:	3d 81       	ldd	r19, Y+5	; 0x05
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <DIO_voidSetPinValue+0x128>
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f0       	breq	.+26     	; 0x15f8 <DIO_voidSetPinValue+0x140>
    15de:	5f c0       	rjmp	.+190    	; 0x169e <DIO_voidSetPinValue+0x1e6>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	89 f1       	breq	.+98     	; 0x164c <DIO_voidSetPinValue+0x194>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <DIO_voidSetPinValue+0x13e>
    15f4:	40 c0       	rjmp	.+128    	; 0x1676 <DIO_voidSetPinValue+0x1be>
    15f6:	53 c0       	rjmp	.+166    	; 0x169e <DIO_voidSetPinValue+0x1e6>
		case DIO_PortA:
			CLR_BIT(PORTA, COPY_u8PinNumber);
    15f8:	ab e3       	ldi	r26, 0x3B	; 59
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e3       	ldi	r30, 0x3B	; 59
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_voidSetPinValue+0x15e>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_voidSetPinValue+0x15a>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	3e c0       	rjmp	.+124    	; 0x169e <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortB:
			CLR_BIT(PORTB, COPY_u8PinNumber);
    1622:	a8 e3       	ldi	r26, 0x38	; 56
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e8 e3       	ldi	r30, 0x38	; 56
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_voidSetPinValue+0x188>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_voidSetPinValue+0x184>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	29 c0       	rjmp	.+82     	; 0x169e <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortC:
			CLR_BIT(PORTC, COPY_u8PinNumber);
    164c:	a5 e3       	ldi	r26, 0x35	; 53
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e5 e3       	ldi	r30, 0x35	; 53
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_voidSetPinValue+0x1b2>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_voidSetPinValue+0x1ae>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	14 c0       	rjmp	.+40     	; 0x169e <DIO_voidSetPinValue+0x1e6>
			break;
		case DIO_PortD:
			CLR_BIT(PORTD, COPY_u8PinNumber);
    1676:	a2 e3       	ldi	r26, 0x32	; 50
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e2 e3       	ldi	r30, 0x32	; 50
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_voidSetPinValue+0x1dc>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_voidSetPinValue+0x1d8>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
			break;
		}
	}

}
    169e:	27 96       	adiw	r28, 0x07	; 7
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 COPY_u8Port)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_u8GetPortValue+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_u8GetPortValue+0x8>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	8a 83       	std	Y+2, r24	; 0x02

	u8 LOC_u8Temp;

	switch (COPY_u8Port) {
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3c 83       	std	Y+4, r19	; 0x04
    16c6:	2b 83       	std	Y+3, r18	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	91 05       	cpc	r25, r1
    16d0:	d1 f0       	breq	.+52     	; 0x1706 <DIO_u8GetPortValue+0x56>
    16d2:	2b 81       	ldd	r18, Y+3	; 0x03
    16d4:	3c 81       	ldd	r19, Y+4	; 0x04
    16d6:	22 30       	cpi	r18, 0x02	; 2
    16d8:	31 05       	cpc	r19, r1
    16da:	2c f4       	brge	.+10     	; 0x16e6 <DIO_u8GetPortValue+0x36>
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	61 f0       	breq	.+24     	; 0x16fc <DIO_u8GetPortValue+0x4c>
    16e4:	1e c0       	rjmp	.+60     	; 0x1722 <DIO_u8GetPortValue+0x72>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	81 f0       	breq	.+32     	; 0x1710 <DIO_u8GetPortValue+0x60>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	81 f0       	breq	.+32     	; 0x171a <DIO_u8GetPortValue+0x6a>
    16fa:	13 c0       	rjmp	.+38     	; 0x1722 <DIO_u8GetPortValue+0x72>
	case DIO_PortA:
		LOC_u8Temp = PINA;
    16fc:	e9 e3       	ldi	r30, 0x39	; 57
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	89 83       	std	Y+1, r24	; 0x01
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <DIO_u8GetPortValue+0x72>
		break;
	case DIO_PortB:
		LOC_u8Temp = PINA;
    1706:	e9 e3       	ldi	r30, 0x39	; 57
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	09 c0       	rjmp	.+18     	; 0x1722 <DIO_u8GetPortValue+0x72>
		break;
	case DIO_PortC:
		LOC_u8Temp = PINA;
    1710:	e9 e3       	ldi	r30, 0x39	; 57
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <DIO_u8GetPortValue+0x72>
		break;
	case DIO_PortD:
		LOC_u8Temp = PINA;
    171a:	e9 e3       	ldi	r30, 0x39	; 57
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_u8Temp;
    1722:	89 81       	ldd	r24, Y+1	; 0x01

}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 COPY_u8Port, u8 COPY_u8PinNumber)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <DIO_u8GetPinValue+0x6>
    1738:	00 d0       	rcall	.+0      	; 0x173a <DIO_u8GetPinValue+0x8>
    173a:	0f 92       	push	r0
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	8a 83       	std	Y+2, r24	; 0x02
    1742:	6b 83       	std	Y+3, r22	; 0x03

	u8 LOC_u8Temp;

	switch (COPY_u8Port) {
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3d 83       	std	Y+5, r19	; 0x05
    174c:	2c 83       	std	Y+4, r18	; 0x04
    174e:	4c 81       	ldd	r20, Y+4	; 0x04
    1750:	5d 81       	ldd	r21, Y+5	; 0x05
    1752:	41 30       	cpi	r20, 0x01	; 1
    1754:	51 05       	cpc	r21, r1
    1756:	41 f1       	breq	.+80     	; 0x17a8 <DIO_u8GetPinValue+0x76>
    1758:	8c 81       	ldd	r24, Y+4	; 0x04
    175a:	9d 81       	ldd	r25, Y+5	; 0x05
    175c:	82 30       	cpi	r24, 0x02	; 2
    175e:	91 05       	cpc	r25, r1
    1760:	34 f4       	brge	.+12     	; 0x176e <DIO_u8GetPinValue+0x3c>
    1762:	2c 81       	ldd	r18, Y+4	; 0x04
    1764:	3d 81       	ldd	r19, Y+5	; 0x05
    1766:	21 15       	cp	r18, r1
    1768:	31 05       	cpc	r19, r1
    176a:	61 f0       	breq	.+24     	; 0x1784 <DIO_u8GetPinValue+0x52>
    176c:	52 c0       	rjmp	.+164    	; 0x1812 <DIO_u8GetPinValue+0xe0>
    176e:	4c 81       	ldd	r20, Y+4	; 0x04
    1770:	5d 81       	ldd	r21, Y+5	; 0x05
    1772:	42 30       	cpi	r20, 0x02	; 2
    1774:	51 05       	cpc	r21, r1
    1776:	51 f1       	breq	.+84     	; 0x17cc <DIO_u8GetPinValue+0x9a>
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	83 30       	cpi	r24, 0x03	; 3
    177e:	91 05       	cpc	r25, r1
    1780:	b9 f1       	breq	.+110    	; 0x17f0 <DIO_u8GetPinValue+0xbe>
    1782:	47 c0       	rjmp	.+142    	; 0x1812 <DIO_u8GetPinValue+0xe0>
	case DIO_PortA:
		LOC_u8Temp = GET_BIT(PINA, COPY_u8PinNumber);
    1784:	e9 e3       	ldi	r30, 0x39	; 57
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a9 01       	movw	r20, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_u8GetPinValue+0x6a>
    1798:	55 95       	asr	r21
    179a:	47 95       	ror	r20
    179c:	8a 95       	dec	r24
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_u8GetPinValue+0x66>
    17a0:	ca 01       	movw	r24, r20
    17a2:	81 70       	andi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	35 c0       	rjmp	.+106    	; 0x1812 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PortB:
		LOC_u8Temp = GET_BIT(PINB, COPY_u8PinNumber);
    17a8:	e6 e3       	ldi	r30, 0x36	; 54
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_u8GetPinValue+0x8e>
    17bc:	55 95       	asr	r21
    17be:	47 95       	ror	r20
    17c0:	8a 95       	dec	r24
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_u8GetPinValue+0x8a>
    17c4:	ca 01       	movw	r24, r20
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	23 c0       	rjmp	.+70     	; 0x1812 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PortC:
		LOC_u8Temp = GET_BIT(PINC, COPY_u8PinNumber);
    17cc:	e3 e3       	ldi	r30, 0x33	; 51
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	88 2f       	mov	r24, r24
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a9 01       	movw	r20, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_u8GetPinValue+0xb2>
    17e0:	55 95       	asr	r21
    17e2:	47 95       	ror	r20
    17e4:	8a 95       	dec	r24
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_u8GetPinValue+0xae>
    17e8:	ca 01       	movw	r24, r20
    17ea:	81 70       	andi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	11 c0       	rjmp	.+34     	; 0x1812 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PortD:
		LOC_u8Temp = GET_BIT(PIND, COPY_u8PinNumber);
    17f0:	e0 e3       	ldi	r30, 0x30	; 48
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	88 2f       	mov	r24, r24
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a9 01       	movw	r20, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_u8GetPinValue+0xd6>
    1804:	55 95       	asr	r21
    1806:	47 95       	ror	r20
    1808:	8a 95       	dec	r24
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_u8GetPinValue+0xd2>
    180c:	ca 01       	movw	r24, r20
    180e:	81 70       	andi	r24, 0x01	; 1
    1810:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return LOC_u8Temp;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <SW_voidInit>:

#include "SW_interface.h"
#include "SW_private.h"

void SW_voidInit	( SW_Type Copy_SWConfig)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <SW_voidInit+0x6>
    182a:	0f 92       	push	r0
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	69 83       	std	Y+1, r22	; 0x01
    1832:	7a 83       	std	Y+2, r23	; 0x02
    1834:	8b 83       	std	Y+3, r24	; 0x03
	DIO_voidSetPinDirection( Copy_SWConfig.Port , Copy_SWConfig.Pin , Input );
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	69 2f       	mov	r22, r25
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_voidSetPinDirection>

	if( Copy_SWConfig.SW_Conection == SW_Input_Pullup)
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	31 f4       	brne	.+12     	; 0x1854 <SW_voidInit+0x30>
	{
		DIO_voidSetPinDirection(Copy_SWConfig.Port , Copy_SWConfig.Pin , Input_Pullup);
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	69 2f       	mov	r22, r25
    184e:	42 e0       	ldi	r20, 0x02	; 2
    1850:	0e 94 9e 08 	call	0x113c	; 0x113c <DIO_voidSetPinDirection>
	}

}
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <SW_u8IsPressed>:

u8 SW_u8IsPressed ( SW_Type Copy_SWConfig)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <SW_u8IsPressed+0x6>
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	69 83       	std	Y+1, r22	; 0x01
    186e:	7a 83       	std	Y+2, r23	; 0x02
    1870:	8b 83       	std	Y+3, r24	; 0x03
   return	DIO_u8GetPinValue(Copy_SWConfig.Port , Copy_SWConfig.Pin ) ;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	9a 81       	ldd	r25, Y+2	; 0x02
    1876:	69 2f       	mov	r22, r25
    1878:	0e 94 99 0b 	call	0x1732	; 0x1732 <DIO_u8GetPinValue>
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"


void LCD_voidInit(void)
{
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	c8 58       	subi	r28, 0x88	; 136
    1896:	d0 40       	sbci	r29, 0x00	; 0
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(LCD_PORT , Output);
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DIO_voidSetPortDirection>
    18aa:	fe 01       	movw	r30, r28
    18ac:	eb 57       	subi	r30, 0x7B	; 123
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a8 e4       	ldi	r26, 0x48	; 72
    18b6:	b2 e4       	ldi	r27, 0x42	; 66
    18b8:	80 83       	st	Z, r24
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	8e 01       	movw	r16, r28
    18c2:	0f 57       	subi	r16, 0x7F	; 127
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	fe 01       	movw	r30, r28
    18c8:	eb 57       	subi	r30, 0x7B	; 123
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a ef       	ldi	r20, 0xFA	; 250
    18da:	54 e4       	ldi	r21, 0x44	; 68
    18dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	f8 01       	movw	r30, r16
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ee:	fe 01       	movw	r30, r28
    18f0:	ef 57       	subi	r30, 0x7F	; 127
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	44 f4       	brge	.+16     	; 0x191c <LCD_voidInit+0x94>
		__ticks = 1;
    190c:	fe 01       	movw	r30, r28
    190e:	e1 58       	subi	r30, 0x81	; 129
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	64 c0       	rjmp	.+200    	; 0x19e4 <LCD_voidInit+0x15c>
	else if (__tmp > 65535)
    191c:	fe 01       	movw	r30, r28
    191e:	ef 57       	subi	r30, 0x7F	; 127
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	0c f0       	brlt	.+2      	; 0x193c <LCD_voidInit+0xb4>
    193a:	43 c0       	rjmp	.+134    	; 0x19c2 <LCD_voidInit+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193c:	fe 01       	movw	r30, r28
    193e:	eb 57       	subi	r30, 0x7B	; 123
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8e 01       	movw	r16, r28
    195c:	01 58       	subi	r16, 0x81	; 129
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	f8 01       	movw	r30, r16
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	80 83       	st	Z, r24
    1972:	1f c0       	rjmp	.+62     	; 0x19b2 <LCD_voidInit+0x12a>
    1974:	fe 01       	movw	r30, r28
    1976:	e3 58       	subi	r30, 0x83	; 131
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1982:	fe 01       	movw	r30, r28
    1984:	e3 58       	subi	r30, 0x83	; 131
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_voidInit+0x104>
    1990:	fe 01       	movw	r30, r28
    1992:	e3 58       	subi	r30, 0x83	; 131
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	de 01       	movw	r26, r28
    199c:	a1 58       	subi	r26, 0x81	; 129
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	fe 01       	movw	r30, r28
    19a2:	e1 58       	subi	r30, 0x81	; 129
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	11 96       	adiw	r26, 0x01	; 1
    19ae:	9c 93       	st	X, r25
    19b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	fe 01       	movw	r30, r28
    19b4:	e1 58       	subi	r30, 0x81	; 129
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	d1 f6       	brne	.-76     	; 0x1974 <LCD_voidInit+0xec>
    19c0:	27 c0       	rjmp	.+78     	; 0x1a10 <LCD_voidInit+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	8e 01       	movw	r16, r28
    19c4:	01 58       	subi	r16, 0x81	; 129
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	fe 01       	movw	r30, r28
    19ca:	ef 57       	subi	r30, 0x7F	; 127
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	60 81       	ld	r22, Z
    19d0:	71 81       	ldd	r23, Z+1	; 0x01
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	f8 01       	movw	r30, r16
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	de 01       	movw	r26, r28
    19e6:	a5 58       	subi	r26, 0x85	; 133
    19e8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e1 58       	subi	r30, 0x81	; 129
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	8d 93       	st	X+, r24
    19f6:	9c 93       	st	X, r25
    19f8:	fe 01       	movw	r30, r28
    19fa:	e5 58       	subi	r30, 0x85	; 133
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_voidInit+0x17a>
    1a06:	fe 01       	movw	r30, r28
    1a08:	e5 58       	subi	r30, 0x85	; 133
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24

	_delay_ms(50);

	DIO_voidSetPinValue(LCD_PORT,LCD_RS,Low);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	64 e0       	ldi	r22, 0x04	; 4
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e9 58       	subi	r30, 0x89	; 137
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a0 e8       	ldi	r26, 0x80	; 128
    1a26:	bf e3       	ldi	r27, 0x3F	; 63
    1a28:	80 83       	st	Z, r24
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	a2 83       	std	Z+2, r26	; 0x02
    1a2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a30:	8e 01       	movw	r16, r28
    1a32:	0d 58       	subi	r16, 0x8D	; 141
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	fe 01       	movw	r30, r28
    1a38:	e9 58       	subi	r30, 0x89	; 137
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	2b ea       	ldi	r18, 0xAB	; 171
    1a46:	3a ea       	ldi	r19, 0xAA	; 170
    1a48:	4a e2       	ldi	r20, 0x2A	; 42
    1a4a:	50 e4       	ldi	r21, 0x40	; 64
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	f8 01       	movw	r30, r16
    1a56:	80 83       	st	Z, r24
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	a2 83       	std	Z+2, r26	; 0x02
    1a5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ed 58       	subi	r30, 0x8D	; 141
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	34 f4       	brge	.+12     	; 0x1a88 <LCD_voidInit+0x200>
		__ticks = 1;
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	ee 58       	subi	r30, 0x8E	; 142
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	80 83       	st	Z, r24
    1a86:	e0 c0       	rjmp	.+448    	; 0x1c48 <LCD_voidInit+0x3c0>
	else if (__tmp > 255)
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ed 58       	subi	r30, 0x8D	; 141
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4f e7       	ldi	r20, 0x7F	; 127
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	0c f0       	brlt	.+2      	; 0x1aa8 <LCD_voidInit+0x220>
    1aa6:	c0 c0       	rjmp	.+384    	; 0x1c28 <LCD_voidInit+0x3a0>
	{
		_delay_ms(__us / 1000.0);
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e9 58       	subi	r30, 0x89	; 137
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	60 81       	ld	r22, Z
    1ab0:	71 81       	ldd	r23, Z+1	; 0x01
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	4a e7       	ldi	r20, 0x7A	; 122
    1abc:	54 e4       	ldi	r21, 0x44	; 68
    1abe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	e2 59       	subi	r30, 0x92	; 146
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	a2 83       	std	Z+2, r26	; 0x02
    1ad2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	8e 01       	movw	r16, r28
    1ad6:	06 59       	subi	r16, 0x96	; 150
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	fe 01       	movw	r30, r28
    1adc:	e2 59       	subi	r30, 0x92	; 146
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a ef       	ldi	r20, 0xFA	; 250
    1aee:	54 e4       	ldi	r21, 0x44	; 68
    1af0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	f8 01       	movw	r30, r16
    1afa:	80 83       	st	Z, r24
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	a2 83       	std	Z+2, r26	; 0x02
    1b00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b02:	fe 01       	movw	r30, r28
    1b04:	e6 59       	subi	r30, 0x96	; 150
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	44 f4       	brge	.+16     	; 0x1b30 <LCD_voidInit+0x2a8>
		__ticks = 1;
    1b20:	fe 01       	movw	r30, r28
    1b22:	e8 59       	subi	r30, 0x98	; 152
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
    1b2e:	64 c0       	rjmp	.+200    	; 0x1bf8 <LCD_voidInit+0x370>
	else if (__tmp > 65535)
    1b30:	fe 01       	movw	r30, r28
    1b32:	e6 59       	subi	r30, 0x96	; 150
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	0c f0       	brlt	.+2      	; 0x1b50 <LCD_voidInit+0x2c8>
    1b4e:	43 c0       	rjmp	.+134    	; 0x1bd6 <LCD_voidInit+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	fe 01       	movw	r30, r28
    1b52:	e2 59       	subi	r30, 0x92	; 146
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	60 81       	ld	r22, Z
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8e 01       	movw	r16, r28
    1b70:	08 59       	subi	r16, 0x98	; 152
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	f8 01       	movw	r30, r16
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	1f c0       	rjmp	.+62     	; 0x1bc6 <LCD_voidInit+0x33e>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	ea 59       	subi	r30, 0x9A	; 154
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	88 ec       	ldi	r24, 0xC8	; 200
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
    1b96:	fe 01       	movw	r30, r28
    1b98:	ea 59       	subi	r30, 0x9A	; 154
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_voidInit+0x318>
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	ea 59       	subi	r30, 0x9A	; 154
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	de 01       	movw	r26, r28
    1bb0:	a8 59       	subi	r26, 0x98	; 152
    1bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e8 59       	subi	r30, 0x98	; 152
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	80 81       	ld	r24, Z
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	9c 93       	st	X, r25
    1bc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e8 59       	subi	r30, 0x98	; 152
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	d1 f6       	brne	.-76     	; 0x1b88 <LCD_voidInit+0x300>
    1bd4:	4b c0       	rjmp	.+150    	; 0x1c6c <LCD_voidInit+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	08 59       	subi	r16, 0x98	; 152
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e6 59       	subi	r30, 0x96	; 150
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
    1bf8:	de 01       	movw	r26, r28
    1bfa:	ac 59       	subi	r26, 0x9C	; 156
    1bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e8 59       	subi	r30, 0x98	; 152
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	11 96       	adiw	r26, 0x01	; 1
    1c0a:	9c 93       	st	X, r25
    1c0c:	8e 93       	st	-X, r24
    1c0e:	fe 01       	movw	r30, r28
    1c10:	ec 59       	subi	r30, 0x9C	; 156
    1c12:	ff 4f       	sbci	r31, 0xFF	; 255
    1c14:	80 81       	ld	r24, Z
    1c16:	91 81       	ldd	r25, Z+1	; 0x01
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_voidInit+0x390>
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	ec 59       	subi	r30, 0x9C	; 156
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	22 c0       	rjmp	.+68     	; 0x1c6c <LCD_voidInit+0x3e4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c28:	8e 01       	movw	r16, r28
    1c2a:	0e 58       	subi	r16, 0x8E	; 142
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ed 58       	subi	r30, 0x8D	; 141
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	f8 01       	movw	r30, r16
    1c46:	80 83       	st	Z, r24
    1c48:	de 01       	movw	r26, r28
    1c4a:	ad 59       	subi	r26, 0x9D	; 157
    1c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ee 58       	subi	r30, 0x8E	; 142
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ed 59       	subi	r30, 0x9D	; 157
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	8a 95       	dec	r24
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD_voidInit+0x3d8>
    1c64:	fe 01       	movw	r30, r28
    1c66:	ed 59       	subi	r30, 0x9D	; 157
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 83       	st	Z, r24
	_delay_us(1);

	LCD_voidSendNibble(0b0011);
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>
    1c72:	fe 01       	movw	r30, r28
    1c74:	e1 5a       	subi	r30, 0xA1	; 161
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1c7e:	b0 e4       	ldi	r27, 0x40	; 64
    1c80:	80 83       	st	Z, r24
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	a2 83       	std	Z+2, r26	; 0x02
    1c86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	8e 01       	movw	r16, r28
    1c8a:	05 5a       	subi	r16, 0xA5	; 165
    1c8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e1 5a       	subi	r30, 0xA1	; 161
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	f8 01       	movw	r30, r16
    1cae:	80 83       	st	Z, r24
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	a2 83       	std	Z+2, r26	; 0x02
    1cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e5 5a       	subi	r30, 0xA5	; 165
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	44 f4       	brge	.+16     	; 0x1ce4 <LCD_voidInit+0x45c>
		__ticks = 1;
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e7 5a       	subi	r30, 0xA7	; 167
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	80 83       	st	Z, r24
    1ce2:	64 c0       	rjmp	.+200    	; 0x1dac <LCD_voidInit+0x524>
	else if (__tmp > 65535)
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e5 5a       	subi	r30, 0xA5	; 165
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <LCD_voidInit+0x47c>
    1d02:	43 c0       	rjmp	.+134    	; 0x1d8a <LCD_voidInit+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	fe 01       	movw	r30, r28
    1d06:	e1 5a       	subi	r30, 0xA1	; 161
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	8e 01       	movw	r16, r28
    1d24:	07 5a       	subi	r16, 0xA7	; 167
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	f8 01       	movw	r30, r16
    1d36:	91 83       	std	Z+1, r25	; 0x01
    1d38:	80 83       	st	Z, r24
    1d3a:	1f c0       	rjmp	.+62     	; 0x1d7a <LCD_voidInit+0x4f2>
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e9 5a       	subi	r30, 0xA9	; 169
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	88 ec       	ldi	r24, 0xC8	; 200
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e9 5a       	subi	r30, 0xA9	; 169
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	91 81       	ldd	r25, Z+1	; 0x01
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_voidInit+0x4cc>
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e9 5a       	subi	r30, 0xA9	; 169
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d62:	de 01       	movw	r26, r28
    1d64:	a7 5a       	subi	r26, 0xA7	; 167
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e7 5a       	subi	r30, 0xA7	; 167
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	11 96       	adiw	r26, 0x01	; 1
    1d76:	9c 93       	st	X, r25
    1d78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e7 5a       	subi	r30, 0xA7	; 167
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	d1 f6       	brne	.-76     	; 0x1d3c <LCD_voidInit+0x4b4>
    1d88:	27 c0       	rjmp	.+78     	; 0x1dd8 <LCD_voidInit+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	07 5a       	subi	r16, 0xA7	; 167
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	fe 01       	movw	r30, r28
    1d92:	e5 5a       	subi	r30, 0xA5	; 165
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	60 81       	ld	r22, Z
    1d98:	71 81       	ldd	r23, Z+1	; 0x01
    1d9a:	82 81       	ldd	r24, Z+2	; 0x02
    1d9c:	93 81       	ldd	r25, Z+3	; 0x03
    1d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	f8 01       	movw	r30, r16
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	de 01       	movw	r26, r28
    1dae:	ab 5a       	subi	r26, 0xAB	; 171
    1db0:	bf 4f       	sbci	r27, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e7 5a       	subi	r30, 0xA7	; 167
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	8d 93       	st	X+, r24
    1dbe:	9c 93       	st	X, r25
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	eb 5a       	subi	r30, 0xAB	; 171
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	91 81       	ldd	r25, Z+1	; 0x01
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LCD_voidInit+0x542>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	eb 5a       	subi	r30, 0xAB	; 171
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
	_delay_ms(5);

	LCD_voidSendNibble(0b0011);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>
    1dde:	fe 01       	movw	r30, r28
    1de0:	ef 5a       	subi	r30, 0xAF	; 175
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 ea       	ldi	r26, 0xA0	; 160
    1dea:	b0 e4       	ldi	r27, 0x40	; 64
    1dec:	80 83       	st	Z, r24
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	a2 83       	std	Z+2, r26	; 0x02
    1df2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df4:	8e 01       	movw	r16, r28
    1df6:	03 5b       	subi	r16, 0xB3	; 179
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	ef 5a       	subi	r30, 0xAF	; 175
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a ef       	ldi	r20, 0xFA	; 250
    1e0e:	54 e4       	ldi	r21, 0x44	; 68
    1e10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	f8 01       	movw	r30, r16
    1e1a:	80 83       	st	Z, r24
    1e1c:	91 83       	std	Z+1, r25	; 0x01
    1e1e:	a2 83       	std	Z+2, r26	; 0x02
    1e20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e22:	fe 01       	movw	r30, r28
    1e24:	e3 5b       	subi	r30, 0xB3	; 179
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	44 f4       	brge	.+16     	; 0x1e50 <LCD_voidInit+0x5c8>
		__ticks = 1;
    1e40:	fe 01       	movw	r30, r28
    1e42:	e5 5b       	subi	r30, 0xB5	; 181
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	91 83       	std	Z+1, r25	; 0x01
    1e4c:	80 83       	st	Z, r24
    1e4e:	64 c0       	rjmp	.+200    	; 0x1f18 <LCD_voidInit+0x690>
	else if (__tmp > 65535)
    1e50:	fe 01       	movw	r30, r28
    1e52:	e3 5b       	subi	r30, 0xB3	; 179
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	93 81       	ldd	r25, Z+3	; 0x03
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	0c f0       	brlt	.+2      	; 0x1e70 <LCD_voidInit+0x5e8>
    1e6e:	43 c0       	rjmp	.+134    	; 0x1ef6 <LCD_voidInit+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e70:	fe 01       	movw	r30, r28
    1e72:	ef 5a       	subi	r30, 0xAF	; 175
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e2       	ldi	r20, 0x20	; 32
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8e 01       	movw	r16, r28
    1e90:	05 5b       	subi	r16, 0xB5	; 181
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	80 83       	st	Z, r24
    1ea6:	1f c0       	rjmp	.+62     	; 0x1ee6 <LCD_voidInit+0x65e>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e7 5b       	subi	r30, 0xB7	; 183
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	88 ec       	ldi	r24, 0xC8	; 200
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	80 83       	st	Z, r24
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e7 5b       	subi	r30, 0xB7	; 183
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_voidInit+0x638>
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e7 5b       	subi	r30, 0xB7	; 183
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	de 01       	movw	r26, r28
    1ed0:	a5 5b       	subi	r26, 0xB5	; 181
    1ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed4:	fe 01       	movw	r30, r28
    1ed6:	e5 5b       	subi	r30, 0xB5	; 181
    1ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eda:	80 81       	ld	r24, Z
    1edc:	91 81       	ldd	r25, Z+1	; 0x01
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	11 96       	adiw	r26, 0x01	; 1
    1ee2:	9c 93       	st	X, r25
    1ee4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e5 5b       	subi	r30, 0xB5	; 181
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	80 81       	ld	r24, Z
    1eee:	91 81       	ldd	r25, Z+1	; 0x01
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	d1 f6       	brne	.-76     	; 0x1ea8 <LCD_voidInit+0x620>
    1ef4:	27 c0       	rjmp	.+78     	; 0x1f44 <LCD_voidInit+0x6bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	05 5b       	subi	r16, 0xB5	; 181
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	fe 01       	movw	r30, r28
    1efe:	e3 5b       	subi	r30, 0xB3	; 179
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	60 81       	ld	r22, Z
    1f04:	71 81       	ldd	r23, Z+1	; 0x01
    1f06:	82 81       	ldd	r24, Z+2	; 0x02
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	f8 01       	movw	r30, r16
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
    1f18:	de 01       	movw	r26, r28
    1f1a:	a9 5b       	subi	r26, 0xB9	; 185
    1f1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e5 5b       	subi	r30, 0xB5	; 181
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	91 81       	ldd	r25, Z+1	; 0x01
    1f28:	8d 93       	st	X+, r24
    1f2a:	9c 93       	st	X, r25
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e9 5b       	subi	r30, 0xB9	; 185
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_voidInit+0x6ae>
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e9 5b       	subi	r30, 0xB9	; 185
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
	_delay_ms(5);

	LCD_voidSendNibble(0b0011);
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ed 5b       	subi	r30, 0xBD	; 189
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 ea       	ldi	r26, 0xA0	; 160
    1f56:	b0 e4       	ldi	r27, 0x40	; 64
    1f58:	80 83       	st	Z, r24
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	a2 83       	std	Z+2, r26	; 0x02
    1f5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f60:	8e 01       	movw	r16, r28
    1f62:	01 5c       	subi	r16, 0xC1	; 193
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	fe 01       	movw	r30, r28
    1f68:	ed 5b       	subi	r30, 0xBD	; 189
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a ef       	ldi	r20, 0xFA	; 250
    1f7a:	54 e4       	ldi	r21, 0x44	; 68
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	f8 01       	movw	r30, r16
    1f86:	80 83       	st	Z, r24
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	a2 83       	std	Z+2, r26	; 0x02
    1f8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f8e:	fe 01       	movw	r30, r28
    1f90:	ff 96       	adiw	r30, 0x3f	; 63
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e8       	ldi	r20, 0x80	; 128
    1fa0:	5f e3       	ldi	r21, 0x3F	; 63
    1fa2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fa6:	88 23       	and	r24, r24
    1fa8:	2c f4       	brge	.+10     	; 0x1fb4 <LCD_voidInit+0x72c>
		__ticks = 1;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9e af       	std	Y+62, r25	; 0x3e
    1fb0:	8d af       	std	Y+61, r24	; 0x3d
    1fb2:	46 c0       	rjmp	.+140    	; 0x2040 <LCD_voidInit+0x7b8>
	else if (__tmp > 65535)
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	ff 96       	adiw	r30, 0x3f	; 63
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	3f ef       	ldi	r19, 0xFF	; 255
    1fc4:	4f e7       	ldi	r20, 0x7F	; 127
    1fc6:	57 e4       	ldi	r21, 0x47	; 71
    1fc8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	64 f5       	brge	.+88     	; 0x2028 <LCD_voidInit+0x7a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ed 5b       	subi	r30, 0xBD	; 189
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9e af       	std	Y+62, r25	; 0x3e
    1ffc:	8d af       	std	Y+61, r24	; 0x3d
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <LCD_voidInit+0x796>
    2000:	88 ec       	ldi	r24, 0xC8	; 200
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9c af       	std	Y+60, r25	; 0x3c
    2006:	8b af       	std	Y+59, r24	; 0x3b
    2008:	8b ad       	ldd	r24, Y+59	; 0x3b
    200a:	9c ad       	ldd	r25, Y+60	; 0x3c
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_voidInit+0x784>
    2010:	9c af       	std	Y+60, r25	; 0x3c
    2012:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	8d ad       	ldd	r24, Y+61	; 0x3d
    2016:	9e ad       	ldd	r25, Y+62	; 0x3e
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9e af       	std	Y+62, r25	; 0x3e
    201c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2020:	9e ad       	ldd	r25, Y+62	; 0x3e
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <LCD_voidInit+0x778>
    2026:	16 c0       	rjmp	.+44     	; 0x2054 <LCD_voidInit+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	fe 01       	movw	r30, r28
    202a:	ff 96       	adiw	r30, 0x3f	; 63
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e af       	std	Y+62, r25	; 0x3e
    203e:	8d af       	std	Y+61, r24	; 0x3d
    2040:	8d ad       	ldd	r24, Y+61	; 0x3d
    2042:	9e ad       	ldd	r25, Y+62	; 0x3e
    2044:	9a af       	std	Y+58, r25	; 0x3a
    2046:	89 af       	std	Y+57, r24	; 0x39
    2048:	89 ad       	ldd	r24, Y+57	; 0x39
    204a:	9a ad       	ldd	r25, Y+58	; 0x3a
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_voidInit+0x7c4>
    2050:	9a af       	std	Y+58, r25	; 0x3a
    2052:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);

	LCD_voidSendNibble(0b0010);
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>

	LCD_voidSendCommand(0b00100000);  // Function Set
    205a:	80 e2       	ldi	r24, 0x20	; 32
    205c:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_voidSendCommand>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e8       	ldi	r26, 0x80	; 128
    2066:	bf e3       	ldi	r27, 0x3F	; 63
    2068:	8d ab       	std	Y+53, r24	; 0x35
    206a:	9e ab       	std	Y+54, r25	; 0x36
    206c:	af ab       	std	Y+55, r26	; 0x37
    206e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	6d a9       	ldd	r22, Y+53	; 0x35
    2072:	7e a9       	ldd	r23, Y+54	; 0x36
    2074:	8f a9       	ldd	r24, Y+55	; 0x37
    2076:	98 ad       	ldd	r25, Y+56	; 0x38
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4a ef       	ldi	r20, 0xFA	; 250
    207e:	54 e4       	ldi	r21, 0x44	; 68
    2080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	89 ab       	std	Y+49, r24	; 0x31
    208a:	9a ab       	std	Y+50, r25	; 0x32
    208c:	ab ab       	std	Y+51, r26	; 0x33
    208e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2090:	69 a9       	ldd	r22, Y+49	; 0x31
    2092:	7a a9       	ldd	r23, Y+50	; 0x32
    2094:	8b a9       	ldd	r24, Y+51	; 0x33
    2096:	9c a9       	ldd	r25, Y+52	; 0x34
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <LCD_voidInit+0x82a>
		__ticks = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	98 ab       	std	Y+48, r25	; 0x30
    20ae:	8f a7       	std	Y+47, r24	; 0x2f
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <LCD_voidInit+0x8a8>
	else if (__tmp > 65535)
    20b2:	69 a9       	ldd	r22, Y+49	; 0x31
    20b4:	7a a9       	ldd	r23, Y+50	; 0x32
    20b6:	8b a9       	ldd	r24, Y+51	; 0x33
    20b8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	4c f5       	brge	.+82     	; 0x211c <LCD_voidInit+0x894>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	6d a9       	ldd	r22, Y+53	; 0x35
    20cc:	7e a9       	ldd	r23, Y+54	; 0x36
    20ce:	8f a9       	ldd	r24, Y+55	; 0x37
    20d0:	98 ad       	ldd	r25, Y+56	; 0x38
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e2       	ldi	r20, 0x20	; 32
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	98 ab       	std	Y+48, r25	; 0x30
    20f0:	8f a7       	std	Y+47, r24	; 0x2f
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <LCD_voidInit+0x88a>
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e a7       	std	Y+46, r25	; 0x2e
    20fa:	8d a7       	std	Y+45, r24	; 0x2d
    20fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    20fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_voidInit+0x878>
    2104:	9e a7       	std	Y+46, r25	; 0x2e
    2106:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	8f a5       	ldd	r24, Y+47	; 0x2f
    210a:	98 a9       	ldd	r25, Y+48	; 0x30
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	98 ab       	std	Y+48, r25	; 0x30
    2110:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	8f a5       	ldd	r24, Y+47	; 0x2f
    2114:	98 a9       	ldd	r25, Y+48	; 0x30
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	69 f7       	brne	.-38     	; 0x20f4 <LCD_voidInit+0x86c>
    211a:	14 c0       	rjmp	.+40     	; 0x2144 <LCD_voidInit+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211c:	69 a9       	ldd	r22, Y+49	; 0x31
    211e:	7a a9       	ldd	r23, Y+50	; 0x32
    2120:	8b a9       	ldd	r24, Y+51	; 0x33
    2122:	9c a9       	ldd	r25, Y+52	; 0x34
    2124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	98 ab       	std	Y+48, r25	; 0x30
    212e:	8f a7       	std	Y+47, r24	; 0x2f
    2130:	8f a5       	ldd	r24, Y+47	; 0x2f
    2132:	98 a9       	ldd	r25, Y+48	; 0x30
    2134:	9c a7       	std	Y+44, r25	; 0x2c
    2136:	8b a7       	std	Y+43, r24	; 0x2b
    2138:	8b a5       	ldd	r24, Y+43	; 0x2b
    213a:	9c a5       	ldd	r25, Y+44	; 0x2c
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_voidInit+0x8b4>
    2140:	9c a7       	std	Y+44, r25	; 0x2c
    2142:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidSendCommand(0b00001100);  // Display ON/OFF
    2144:	8c e0       	ldi	r24, 0x0C	; 12
    2146:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_voidSendCommand>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	a0 e8       	ldi	r26, 0x80	; 128
    2150:	bf e3       	ldi	r27, 0x3F	; 63
    2152:	8f a3       	std	Y+39, r24	; 0x27
    2154:	98 a7       	std	Y+40, r25	; 0x28
    2156:	a9 a7       	std	Y+41, r26	; 0x29
    2158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215a:	6f a1       	ldd	r22, Y+39	; 0x27
    215c:	78 a5       	ldd	r23, Y+40	; 0x28
    215e:	89 a5       	ldd	r24, Y+41	; 0x29
    2160:	9a a5       	ldd	r25, Y+42	; 0x2a
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	4a ef       	ldi	r20, 0xFA	; 250
    2168:	54 e4       	ldi	r21, 0x44	; 68
    216a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8b a3       	std	Y+35, r24	; 0x23
    2174:	9c a3       	std	Y+36, r25	; 0x24
    2176:	ad a3       	std	Y+37, r26	; 0x25
    2178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e8       	ldi	r20, 0x80	; 128
    2188:	5f e3       	ldi	r21, 0x3F	; 63
    218a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    218e:	88 23       	and	r24, r24
    2190:	2c f4       	brge	.+10     	; 0x219c <LCD_voidInit+0x914>
		__ticks = 1;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
    219a:	3f c0       	rjmp	.+126    	; 0x221a <LCD_voidInit+0x992>
	else if (__tmp > 65535)
    219c:	6b a1       	ldd	r22, Y+35	; 0x23
    219e:	7c a1       	ldd	r23, Y+36	; 0x24
    21a0:	8d a1       	ldd	r24, Y+37	; 0x25
    21a2:	9e a1       	ldd	r25, Y+38	; 0x26
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	3f ef       	ldi	r19, 0xFF	; 255
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	57 e4       	ldi	r21, 0x47	; 71
    21ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	4c f5       	brge	.+82     	; 0x2206 <LCD_voidInit+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b4:	6f a1       	ldd	r22, Y+39	; 0x27
    21b6:	78 a5       	ldd	r23, Y+40	; 0x28
    21b8:	89 a5       	ldd	r24, Y+41	; 0x29
    21ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e2       	ldi	r20, 0x20	; 32
    21c2:	51 e4       	ldi	r21, 0x41	; 65
    21c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <LCD_voidInit+0x974>
    21de:	88 ec       	ldi	r24, 0xC8	; 200
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	98 a3       	std	Y+32, r25	; 0x20
    21e4:	8f 8f       	std	Y+31, r24	; 0x1f
    21e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21e8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_voidInit+0x962>
    21ee:	98 a3       	std	Y+32, r25	; 0x20
    21f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f2:	89 a1       	ldd	r24, Y+33	; 0x21
    21f4:	9a a1       	ldd	r25, Y+34	; 0x22
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	9a a3       	std	Y+34, r25	; 0x22
    21fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fc:	89 a1       	ldd	r24, Y+33	; 0x21
    21fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	69 f7       	brne	.-38     	; 0x21de <LCD_voidInit+0x956>
    2204:	14 c0       	rjmp	.+40     	; 0x222e <LCD_voidInit+0x9a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2206:	6b a1       	ldd	r22, Y+35	; 0x23
    2208:	7c a1       	ldd	r23, Y+36	; 0x24
    220a:	8d a1       	ldd	r24, Y+37	; 0x25
    220c:	9e a1       	ldd	r25, Y+38	; 0x26
    220e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	9a a3       	std	Y+34, r25	; 0x22
    2218:	89 a3       	std	Y+33, r24	; 0x21
    221a:	89 a1       	ldd	r24, Y+33	; 0x21
    221c:	9a a1       	ldd	r25, Y+34	; 0x22
    221e:	9e 8f       	std	Y+30, r25	; 0x1e
    2220:	8d 8f       	std	Y+29, r24	; 0x1d
    2222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_voidInit+0x99e>
    222a:	9e 8f       	std	Y+30, r25	; 0x1e
    222c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidSendCommand(0b00000001);  // Display Clear
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_voidSendCommand>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	a0 e0       	ldi	r26, 0x00	; 0
    223a:	b0 e4       	ldi	r27, 0x40	; 64
    223c:	89 8f       	std	Y+25, r24	; 0x19
    223e:	9a 8f       	std	Y+26, r25	; 0x1a
    2240:	ab 8f       	std	Y+27, r26	; 0x1b
    2242:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2244:	69 8d       	ldd	r22, Y+25	; 0x19
    2246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	4a ef       	ldi	r20, 0xFA	; 250
    2252:	54 e4       	ldi	r21, 0x44	; 68
    2254:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8d 8b       	std	Y+21, r24	; 0x15
    225e:	9e 8b       	std	Y+22, r25	; 0x16
    2260:	af 8b       	std	Y+23, r26	; 0x17
    2262:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2264:	6d 89       	ldd	r22, Y+21	; 0x15
    2266:	7e 89       	ldd	r23, Y+22	; 0x16
    2268:	8f 89       	ldd	r24, Y+23	; 0x17
    226a:	98 8d       	ldd	r25, Y+24	; 0x18
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	2c f4       	brge	.+10     	; 0x2286 <LCD_voidInit+0x9fe>
		__ticks = 1;
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9c 8b       	std	Y+20, r25	; 0x14
    2282:	8b 8b       	std	Y+19, r24	; 0x13
    2284:	3f c0       	rjmp	.+126    	; 0x2304 <LCD_voidInit+0xa7c>
	else if (__tmp > 65535)
    2286:	6d 89       	ldd	r22, Y+21	; 0x15
    2288:	7e 89       	ldd	r23, Y+22	; 0x16
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	3f ef       	ldi	r19, 0xFF	; 255
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	57 e4       	ldi	r21, 0x47	; 71
    2296:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	4c f5       	brge	.+82     	; 0x22f0 <LCD_voidInit+0xa68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229e:	69 8d       	ldd	r22, Y+25	; 0x19
    22a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e2       	ldi	r20, 0x20	; 32
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	bc 01       	movw	r22, r24
    22b8:	cd 01       	movw	r24, r26
    22ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9c 8b       	std	Y+20, r25	; 0x14
    22c4:	8b 8b       	std	Y+19, r24	; 0x13
    22c6:	0f c0       	rjmp	.+30     	; 0x22e6 <LCD_voidInit+0xa5e>
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9a 8b       	std	Y+18, r25	; 0x12
    22ce:	89 8b       	std	Y+17, r24	; 0x11
    22d0:	89 89       	ldd	r24, Y+17	; 0x11
    22d2:	9a 89       	ldd	r25, Y+18	; 0x12
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_voidInit+0xa4c>
    22d8:	9a 8b       	std	Y+18, r25	; 0x12
    22da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22dc:	8b 89       	ldd	r24, Y+19	; 0x13
    22de:	9c 89       	ldd	r25, Y+20	; 0x14
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	9c 8b       	std	Y+20, r25	; 0x14
    22e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	69 f7       	brne	.-38     	; 0x22c8 <LCD_voidInit+0xa40>
    22ee:	14 c0       	rjmp	.+40     	; 0x2318 <LCD_voidInit+0xa90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f0:	6d 89       	ldd	r22, Y+21	; 0x15
    22f2:	7e 89       	ldd	r23, Y+22	; 0x16
    22f4:	8f 89       	ldd	r24, Y+23	; 0x17
    22f6:	98 8d       	ldd	r25, Y+24	; 0x18
    22f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	9c 8b       	std	Y+20, r25	; 0x14
    2302:	8b 8b       	std	Y+19, r24	; 0x13
    2304:	8b 89       	ldd	r24, Y+19	; 0x13
    2306:	9c 89       	ldd	r25, Y+20	; 0x14
    2308:	98 8b       	std	Y+16, r25	; 0x10
    230a:	8f 87       	std	Y+15, r24	; 0x0f
    230c:	8f 85       	ldd	r24, Y+15	; 0x0f
    230e:	98 89       	ldd	r25, Y+16	; 0x10
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <LCD_voidInit+0xa88>
    2314:	98 8b       	std	Y+16, r25	; 0x10
    2316:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidSendCommand(0b00000110);  // Display Clear
    2318:	86 e0       	ldi	r24, 0x06	; 6
    231a:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_voidSendCommand>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e8       	ldi	r26, 0x80	; 128
    2324:	bf e3       	ldi	r27, 0x3F	; 63
    2326:	8b 87       	std	Y+11, r24	; 0x0b
    2328:	9c 87       	std	Y+12, r25	; 0x0c
    232a:	ad 87       	std	Y+13, r26	; 0x0d
    232c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2330:	7c 85       	ldd	r23, Y+12	; 0x0c
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	4a ef       	ldi	r20, 0xFA	; 250
    233c:	54 e4       	ldi	r21, 0x44	; 68
    233e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	8f 83       	std	Y+7, r24	; 0x07
    2348:	98 87       	std	Y+8, r25	; 0x08
    234a:	a9 87       	std	Y+9, r26	; 0x09
    234c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e8       	ldi	r20, 0x80	; 128
    235c:	5f e3       	ldi	r21, 0x3F	; 63
    235e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2362:	88 23       	and	r24, r24
    2364:	2c f4       	brge	.+10     	; 0x2370 <LCD_voidInit+0xae8>
		__ticks = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	3f c0       	rjmp	.+126    	; 0x23ee <LCD_voidInit+0xb66>
	else if (__tmp > 65535)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	4c f5       	brge	.+82     	; 0x23da <LCD_voidInit+0xb52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2388:	6b 85       	ldd	r22, Y+11	; 0x0b
    238a:	7c 85       	ldd	r23, Y+12	; 0x0c
    238c:	8d 85       	ldd	r24, Y+13	; 0x0d
    238e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e2       	ldi	r20, 0x20	; 32
    2396:	51 e4       	ldi	r21, 0x41	; 65
    2398:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	bc 01       	movw	r22, r24
    23a2:	cd 01       	movw	r24, r26
    23a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <LCD_voidInit+0xb48>
    23b2:	88 ec       	ldi	r24, 0xC8	; 200
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	f1 f7       	brne	.-4      	; 0x23be <LCD_voidInit+0xb36>
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	9e 83       	std	Y+6, r25	; 0x06
    23ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	9e 81       	ldd	r25, Y+6	; 0x06
    23d4:	00 97       	sbiw	r24, 0x00	; 0
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <LCD_voidInit+0xb2a>
    23d8:	14 c0       	rjmp	.+40     	; 0x2402 <LCD_voidInit+0xb7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23da:	6f 81       	ldd	r22, Y+7	; 0x07
    23dc:	78 85       	ldd	r23, Y+8	; 0x08
    23de:	89 85       	ldd	r24, Y+9	; 0x09
    23e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9e 83       	std	Y+6, r25	; 0x06
    23ec:	8d 83       	std	Y+5, r24	; 0x05
    23ee:	8d 81       	ldd	r24, Y+5	; 0x05
    23f0:	9e 81       	ldd	r25, Y+6	; 0x06
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	01 97       	sbiw	r24, 0x01	; 1
    23fc:	f1 f7       	brne	.-4      	; 0x23fa <LCD_voidInit+0xb72>
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2402:	c8 57       	subi	r28, 0x78	; 120
    2404:	df 4f       	sbci	r29, 0xFF	; 255
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	08 95       	ret

0000241a <LCD_voidSendNibble>:

void LCD_voidSendNibble(u8 COPY_u8Data)
{
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
    2422:	6d 97       	sbiw	r28, 0x1d	; 29
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	de bf       	out	0x3e, r29	; 62
    242a:	0f be       	out	0x3f, r0	; 63
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	8d 8f       	std	Y+29, r24	; 0x1d

	DIO_voidSetPinValue(LCD_PORT,LCD_RW,Low);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	65 e0       	ldi	r22, 0x05	; 5
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	a0 e8       	ldi	r26, 0x80	; 128
    2440:	bf e3       	ldi	r27, 0x3F	; 63
    2442:	89 8f       	std	Y+25, r24	; 0x19
    2444:	9a 8f       	std	Y+26, r25	; 0x1a
    2446:	ab 8f       	std	Y+27, r26	; 0x1b
    2448:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244a:	69 8d       	ldd	r22, Y+25	; 0x19
    244c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    244e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a ef       	ldi	r20, 0xFA	; 250
    2458:	54 e4       	ldi	r21, 0x44	; 68
    245a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8d 8b       	std	Y+21, r24	; 0x15
    2464:	9e 8b       	std	Y+22, r25	; 0x16
    2466:	af 8b       	std	Y+23, r26	; 0x17
    2468:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	2c f4       	brge	.+10     	; 0x248c <LCD_voidSendNibble+0x72>
		__ticks = 1;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	3f c0       	rjmp	.+126    	; 0x250a <LCD_voidSendNibble+0xf0>
	else if (__tmp > 65535)
    248c:	6d 89       	ldd	r22, Y+21	; 0x15
    248e:	7e 89       	ldd	r23, Y+22	; 0x16
    2490:	8f 89       	ldd	r24, Y+23	; 0x17
    2492:	98 8d       	ldd	r25, Y+24	; 0x18
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	3f ef       	ldi	r19, 0xFF	; 255
    2498:	4f e7       	ldi	r20, 0x7F	; 127
    249a:	57 e4       	ldi	r21, 0x47	; 71
    249c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24a0:	18 16       	cp	r1, r24
    24a2:	4c f5       	brge	.+82     	; 0x24f6 <LCD_voidSendNibble+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a4:	69 8d       	ldd	r22, Y+25	; 0x19
    24a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e2       	ldi	r20, 0x20	; 32
    24b2:	51 e4       	ldi	r21, 0x41	; 65
    24b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
    24cc:	0f c0       	rjmp	.+30     	; 0x24ec <LCD_voidSendNibble+0xd2>
    24ce:	88 ec       	ldi	r24, 0xC8	; 200
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	9a 8b       	std	Y+18, r25	; 0x12
    24d4:	89 8b       	std	Y+17, r24	; 0x11
    24d6:	89 89       	ldd	r24, Y+17	; 0x11
    24d8:	9a 89       	ldd	r25, Y+18	; 0x12
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	f1 f7       	brne	.-4      	; 0x24da <LCD_voidSendNibble+0xc0>
    24de:	9a 8b       	std	Y+18, r25	; 0x12
    24e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e2:	8b 89       	ldd	r24, Y+19	; 0x13
    24e4:	9c 89       	ldd	r25, Y+20	; 0x14
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	9c 8b       	std	Y+20, r25	; 0x14
    24ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	9c 89       	ldd	r25, Y+20	; 0x14
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	69 f7       	brne	.-38     	; 0x24ce <LCD_voidSendNibble+0xb4>
    24f4:	14 c0       	rjmp	.+40     	; 0x251e <LCD_voidSendNibble+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f6:	6d 89       	ldd	r22, Y+21	; 0x15
    24f8:	7e 89       	ldd	r23, Y+22	; 0x16
    24fa:	8f 89       	ldd	r24, Y+23	; 0x17
    24fc:	98 8d       	ldd	r25, Y+24	; 0x18
    24fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9c 8b       	std	Y+20, r25	; 0x14
    2508:	8b 8b       	std	Y+19, r24	; 0x13
    250a:	8b 89       	ldd	r24, Y+19	; 0x13
    250c:	9c 89       	ldd	r25, Y+20	; 0x14
    250e:	98 8b       	std	Y+16, r25	; 0x10
    2510:	8f 87       	std	Y+15, r24	; 0x0f
    2512:	8f 85       	ldd	r24, Y+15	; 0x0f
    2514:	98 89       	ldd	r25, Y+16	; 0x10
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <LCD_voidSendNibble+0xfc>
    251a:	98 8b       	std	Y+16, r25	; 0x10
    251c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	DIO_voidSetPinValue(LCD_PORT,LCD_D4, (COPY_u8Data) & 1   	  );
    251e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2520:	98 2f       	mov	r25, r24
    2522:	91 70       	andi	r25, 0x01	; 1
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	49 2f       	mov	r20, r25
    252a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT,LCD_D5, (COPY_u8Data >> 1) & 1   );
    252e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2530:	86 95       	lsr	r24
    2532:	98 2f       	mov	r25, r24
    2534:	91 70       	andi	r25, 0x01	; 1
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	61 e0       	ldi	r22, 0x01	; 1
    253a:	49 2f       	mov	r20, r25
    253c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT,LCD_D6, (COPY_u8Data >> 2) & 1   );
    2540:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2542:	86 95       	lsr	r24
    2544:	86 95       	lsr	r24
    2546:	98 2f       	mov	r25, r24
    2548:	91 70       	andi	r25, 0x01	; 1
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	62 e0       	ldi	r22, 0x02	; 2
    254e:	49 2f       	mov	r20, r25
    2550:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_PORT,LCD_D7, (COPY_u8Data >> 3) & 1   );
    2554:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2556:	86 95       	lsr	r24
    2558:	86 95       	lsr	r24
    255a:	86 95       	lsr	r24
    255c:	98 2f       	mov	r25, r24
    255e:	91 70       	andi	r25, 0x01	; 1
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	63 e0       	ldi	r22, 0x03	; 3
    2564:	49 2f       	mov	r20, r25
    2566:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>


	DIO_voidSetPinValue(LCD_PORT,LCD_E,High);
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	66 e0       	ldi	r22, 0x06	; 6
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	a0 e8       	ldi	r26, 0x80	; 128
    257a:	bf e3       	ldi	r27, 0x3F	; 63
    257c:	8b 87       	std	Y+11, r24	; 0x0b
    257e:	9c 87       	std	Y+12, r25	; 0x0c
    2580:	ad 87       	std	Y+13, r26	; 0x0d
    2582:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2584:	6b 85       	ldd	r22, Y+11	; 0x0b
    2586:	7c 85       	ldd	r23, Y+12	; 0x0c
    2588:	8d 85       	ldd	r24, Y+13	; 0x0d
    258a:	9e 85       	ldd	r25, Y+14	; 0x0e
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	4a ef       	ldi	r20, 0xFA	; 250
    2592:	54 e4       	ldi	r21, 0x44	; 68
    2594:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	8f 83       	std	Y+7, r24	; 0x07
    259e:	98 87       	std	Y+8, r25	; 0x08
    25a0:	a9 87       	std	Y+9, r26	; 0x09
    25a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e8       	ldi	r20, 0x80	; 128
    25b2:	5f e3       	ldi	r21, 0x3F	; 63
    25b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25b8:	88 23       	and	r24, r24
    25ba:	2c f4       	brge	.+10     	; 0x25c6 <LCD_voidSendNibble+0x1ac>
		__ticks = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	3f c0       	rjmp	.+126    	; 0x2644 <LCD_voidSendNibble+0x22a>
	else if (__tmp > 65535)
    25c6:	6f 81       	ldd	r22, Y+7	; 0x07
    25c8:	78 85       	ldd	r23, Y+8	; 0x08
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	3f ef       	ldi	r19, 0xFF	; 255
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	57 e4       	ldi	r21, 0x47	; 71
    25d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	4c f5       	brge	.+82     	; 0x2630 <LCD_voidSendNibble+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25de:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e2       	ldi	r20, 0x20	; 32
    25ec:	51 e4       	ldi	r21, 0x41	; 65
    25ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	bc 01       	movw	r22, r24
    25f8:	cd 01       	movw	r24, r26
    25fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
    2606:	0f c0       	rjmp	.+30     	; 0x2626 <LCD_voidSendNibble+0x20c>
    2608:	88 ec       	ldi	r24, 0xC8	; 200
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	9c 83       	std	Y+4, r25	; 0x04
    260e:	8b 83       	std	Y+3, r24	; 0x03
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <LCD_voidSendNibble+0x1fa>
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	69 f7       	brne	.-38     	; 0x2608 <LCD_voidSendNibble+0x1ee>
    262e:	14 c0       	rjmp	.+40     	; 0x2658 <LCD_voidSendNibble+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2630:	6f 81       	ldd	r22, Y+7	; 0x07
    2632:	78 85       	ldd	r23, Y+8	; 0x08
    2634:	89 85       	ldd	r24, Y+9	; 0x09
    2636:	9a 85       	ldd	r25, Y+10	; 0x0a
    2638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	9e 83       	std	Y+6, r25	; 0x06
    2642:	8d 83       	std	Y+5, r24	; 0x05
    2644:	8d 81       	ldd	r24, Y+5	; 0x05
    2646:	9e 81       	ldd	r25, Y+6	; 0x06
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <LCD_voidSendNibble+0x236>
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_PORT,LCD_E,Low);
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	66 e0       	ldi	r22, 0x06	; 6
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>

}
    2662:	6d 96       	adiw	r28, 0x1d	; 29
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 COPY_u8Data )
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	2f 97       	sbiw	r28, 0x0f	; 15
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_PORT,LCD_RS,High);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	64 e0       	ldi	r22, 0x04	; 4
    268e:	41 e0       	ldi	r20, 0x01	; 1
    2690:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 ea       	ldi	r26, 0xA0	; 160
    269a:	b0 e4       	ldi	r27, 0x40	; 64
    269c:	8b 87       	std	Y+11, r24	; 0x0b
    269e:	9c 87       	std	Y+12, r25	; 0x0c
    26a0:	ad 87       	std	Y+13, r26	; 0x0d
    26a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a ef       	ldi	r20, 0xFA	; 250
    26b2:	54 e4       	ldi	r21, 0x44	; 68
    26b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8f 83       	std	Y+7, r24	; 0x07
    26be:	98 87       	std	Y+8, r25	; 0x08
    26c0:	a9 87       	std	Y+9, r26	; 0x09
    26c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <LCD_voidSendChar+0x72>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <LCD_voidSendChar+0xf0>
	else if (__tmp > 65535)
    26e6:	6f 81       	ldd	r22, Y+7	; 0x07
    26e8:	78 85       	ldd	r23, Y+8	; 0x08
    26ea:	89 85       	ldd	r24, Y+9	; 0x09
    26ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <LCD_voidSendChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <LCD_voidSendChar+0xd2>
    2728:	88 ec       	ldi	r24, 0xC8	; 200
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9c 83       	std	Y+4, r25	; 0x04
    272e:	8b 83       	std	Y+3, r24	; 0x03
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_voidSendChar+0xc0>
    2738:	9c 83       	std	Y+4, r25	; 0x04
    273a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	9e 81       	ldd	r25, Y+6	; 0x06
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <LCD_voidSendChar+0xb4>
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <LCD_voidSendChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6f 81       	ldd	r22, Y+7	; 0x07
    2752:	78 85       	ldd	r23, Y+8	; 0x08
    2754:	89 85       	ldd	r24, Y+9	; 0x09
    2756:	9a 85       	ldd	r25, Y+10	; 0x0a
    2758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	9a 83       	std	Y+2, r25	; 0x02
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_voidSendChar+0xfc>
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);

	LCD_voidSendNibble(COPY_u8Data>>4);
    2778:	8f 85       	ldd	r24, Y+15	; 0x0f
    277a:	82 95       	swap	r24
    277c:	8f 70       	andi	r24, 0x0F	; 15
    277e:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>
	LCD_voidSendNibble(COPY_u8Data);
    2782:	8f 85       	ldd	r24, Y+15	; 0x0f
    2784:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>


}
    2788:	2f 96       	adiw	r28, 0x0f	; 15
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_voidSendCommand>:
void LCD_voidSendCommand(u8 COPY_u8command)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	2f 97       	sbiw	r28, 0x0f	; 15
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_PORT,LCD_RS,Low);
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	64 e0       	ldi	r22, 0x04	; 4
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinValue>
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	a0 ea       	ldi	r26, 0xA0	; 160
    27c0:	b0 e4       	ldi	r27, 0x40	; 64
    27c2:	8b 87       	std	Y+11, r24	; 0x0b
    27c4:	9c 87       	std	Y+12, r25	; 0x0c
    27c6:	ad 87       	std	Y+13, r26	; 0x0d
    27c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    27cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a ef       	ldi	r20, 0xFA	; 250
    27d8:	54 e4       	ldi	r21, 0x44	; 68
    27da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	8f 83       	std	Y+7, r24	; 0x07
    27e4:	98 87       	std	Y+8, r25	; 0x08
    27e6:	a9 87       	std	Y+9, r26	; 0x09
    27e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ea:	6f 81       	ldd	r22, Y+7	; 0x07
    27ec:	78 85       	ldd	r23, Y+8	; 0x08
    27ee:	89 85       	ldd	r24, Y+9	; 0x09
    27f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e8       	ldi	r20, 0x80	; 128
    27f8:	5f e3       	ldi	r21, 0x3F	; 63
    27fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27fe:	88 23       	and	r24, r24
    2800:	2c f4       	brge	.+10     	; 0x280c <LCD_voidSendCommand+0x72>
		__ticks = 1;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9e 83       	std	Y+6, r25	; 0x06
    2808:	8d 83       	std	Y+5, r24	; 0x05
    280a:	3f c0       	rjmp	.+126    	; 0x288a <LCD_voidSendCommand+0xf0>
	else if (__tmp > 65535)
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	3f ef       	ldi	r19, 0xFF	; 255
    2818:	4f e7       	ldi	r20, 0x7F	; 127
    281a:	57 e4       	ldi	r21, 0x47	; 71
    281c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2820:	18 16       	cp	r1, r24
    2822:	4c f5       	brge	.+82     	; 0x2876 <LCD_voidSendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2824:	6b 85       	ldd	r22, Y+11	; 0x0b
    2826:	7c 85       	ldd	r23, Y+12	; 0x0c
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e2       	ldi	r20, 0x20	; 32
    2832:	51 e4       	ldi	r21, 0x41	; 65
    2834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	bc 01       	movw	r22, r24
    283e:	cd 01       	movw	r24, r26
    2840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	0f c0       	rjmp	.+30     	; 0x286c <LCD_voidSendCommand+0xd2>
    284e:	88 ec       	ldi	r24, 0xC8	; 200
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	8b 83       	std	Y+3, r24	; 0x03
    2856:	8b 81       	ldd	r24, Y+3	; 0x03
    2858:	9c 81       	ldd	r25, Y+4	; 0x04
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <LCD_voidSendCommand+0xc0>
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	69 f7       	brne	.-38     	; 0x284e <LCD_voidSendCommand+0xb4>
    2874:	14 c0       	rjmp	.+40     	; 0x289e <LCD_voidSendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2876:	6f 81       	ldd	r22, Y+7	; 0x07
    2878:	78 85       	ldd	r23, Y+8	; 0x08
    287a:	89 85       	ldd	r24, Y+9	; 0x09
    287c:	9a 85       	ldd	r25, Y+10	; 0x0a
    287e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	9a 83       	std	Y+2, r25	; 0x02
    2890:	89 83       	std	Y+1, r24	; 0x01
    2892:	89 81       	ldd	r24, Y+1	; 0x01
    2894:	9a 81       	ldd	r25, Y+2	; 0x02
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	f1 f7       	brne	.-4      	; 0x2896 <LCD_voidSendCommand+0xfc>
    289a:	9a 83       	std	Y+2, r25	; 0x02
    289c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);


	LCD_voidSendNibble(COPY_u8command>>4);
    289e:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a0:	82 95       	swap	r24
    28a2:	8f 70       	andi	r24, 0x0F	; 15
    28a4:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>
	LCD_voidSendNibble(COPY_u8command);
    28a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28aa:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_voidSendNibble>


}
    28ae:	2f 96       	adiw	r28, 0x0f	; 15
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	08 95       	ret

000028c0 <LCD_voidSendStr>:

void LCD_voidSendStr(u8 * COPY_u8Ptr)
{
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <LCD_voidSendStr+0x6>
    28c6:	0f 92       	push	r0
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	9b 83       	std	Y+3, r25	; 0x03
    28ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Iterator=0;
    28d0:	19 82       	std	Y+1, r1	; 0x01
    28d2:	0e c0       	rjmp	.+28     	; 0x28f0 <LCD_voidSendStr+0x30>

	while( COPY_u8Ptr[LOC_u8Iterator] )
	{
		LCD_voidSendChar( COPY_u8Ptr[LOC_u8Iterator] );
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	9b 81       	ldd	r25, Y+3	; 0x03
    28de:	fc 01       	movw	r30, r24
    28e0:	e2 0f       	add	r30, r18
    28e2:	f3 1f       	adc	r31, r19
    28e4:	80 81       	ld	r24, Z
    28e6:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_voidSendChar>
		LOC_u8Iterator++;
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendStr(u8 * COPY_u8Ptr)
{
	u8 LOC_u8Iterator=0;

	while( COPY_u8Ptr[LOC_u8Iterator] )
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 0f       	add	r30, r18
    28fe:	f3 1f       	adc	r31, r19
    2900:	80 81       	ld	r24, Z
    2902:	88 23       	and	r24, r24
    2904:	39 f7       	brne	.-50     	; 0x28d4 <LCD_voidSendStr+0x14>
	{
		LCD_voidSendChar( COPY_u8Ptr[LOC_u8Iterator] );
		LOC_u8Iterator++;
	}

}
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <LCD_voidClear>:

void LCD_voidClear(void)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSendCommand(1);
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_voidSendCommand>

}
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <LCD_voidSendNumber>:


void LCD_voidSendNumber(u32 COPY_u32Number )
{
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	28 97       	sbiw	r28, 0x08	; 8
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	6d 83       	std	Y+5, r22	; 0x05
    293c:	7e 83       	std	Y+6, r23	; 0x06
    293e:	8f 83       	std	Y+7, r24	; 0x07
    2940:	98 87       	std	Y+8, r25	; 0x08
	if(COPY_u32Number == 0)
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	af 81       	ldd	r26, Y+7	; 0x07
    2948:	b8 85       	ldd	r27, Y+8	; 0x08
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	a1 05       	cpc	r26, r1
    294e:	b1 05       	cpc	r27, r1
    2950:	19 f4       	brne	.+6      	; 0x2958 <LCD_voidSendNumber+0x32>
		LCD_voidSendChar(48);
    2952:	80 e3       	ldi	r24, 0x30	; 48
    2954:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_voidSendChar>


	u32 LOC_u32Var=1;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e0       	ldi	r26, 0x00	; 0
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	ab 83       	std	Y+3, r26	; 0x03
    2966:	bc 83       	std	Y+4, r27	; 0x04
    2968:	40 c0       	rjmp	.+128    	; 0x29ea <LCD_voidSendNumber+0xc4>
	while(COPY_u32Number > 0)
	{
		LOC_u32Var*=10;
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	ab 81       	ldd	r26, Y+3	; 0x03
    2970:	bc 81       	ldd	r27, Y+4	; 0x04
    2972:	2a e0       	ldi	r18, 0x0A	; 10
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__mulsi3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	ab 83       	std	Y+3, r26	; 0x03
    298c:	bc 83       	std	Y+4, r27	; 0x04
		LOC_u32Var+=( COPY_u32Number%10 );
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	af 81       	ldd	r26, Y+7	; 0x07
    2994:	b8 85       	ldd	r27, Y+8	; 0x08
    2996:	2a e0       	ldi	r18, 0x0A	; 10
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e0       	ldi	r20, 0x00	; 0
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodsi4>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9c 01       	movw	r18, r24
    29ac:	ad 01       	movw	r20, r26
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	ab 81       	ldd	r26, Y+3	; 0x03
    29b4:	bc 81       	ldd	r27, Y+4	; 0x04
    29b6:	82 0f       	add	r24, r18
    29b8:	93 1f       	adc	r25, r19
    29ba:	a4 1f       	adc	r26, r20
    29bc:	b5 1f       	adc	r27, r21
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	ab 83       	std	Y+3, r26	; 0x03
    29c4:	bc 83       	std	Y+4, r27	; 0x04

		COPY_u32Number/=10;
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	af 81       	ldd	r26, Y+7	; 0x07
    29cc:	b8 85       	ldd	r27, Y+8	; 0x08
    29ce:	2a e0       	ldi	r18, 0x0A	; 10
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	bc 01       	movw	r22, r24
    29d8:	cd 01       	movw	r24, r26
    29da:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodsi4>
    29de:	da 01       	movw	r26, r20
    29e0:	c9 01       	movw	r24, r18
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	af 83       	std	Y+7, r26	; 0x07
    29e8:	b8 87       	std	Y+8, r27	; 0x08
	if(COPY_u32Number == 0)
		LCD_voidSendChar(48);


	u32 LOC_u32Var=1;
	while(COPY_u32Number > 0)
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	af 81       	ldd	r26, Y+7	; 0x07
    29f0:	b8 85       	ldd	r27, Y+8	; 0x08
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	a1 05       	cpc	r26, r1
    29f6:	b1 05       	cpc	r27, r1
    29f8:	09 f0       	breq	.+2      	; 0x29fc <LCD_voidSendNumber+0xd6>
    29fa:	b7 cf       	rjmp	.-146    	; 0x296a <LCD_voidSendNumber+0x44>
    29fc:	23 c0       	rjmp	.+70     	; 0x2a44 <LCD_voidSendNumber+0x11e>
		COPY_u32Number/=10;
	}

	while(LOC_u32Var > 1)
	{
		LCD_voidSendChar( LOC_u32Var % 10 + 48);
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	ab 81       	ldd	r26, Y+3	; 0x03
    2a04:	bc 81       	ldd	r27, Y+4	; 0x04
    2a06:	2a e0       	ldi	r18, 0x0A	; 10
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e0       	ldi	r20, 0x00	; 0
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodsi4>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	80 5d       	subi	r24, 0xD0	; 208
    2a1c:	0e 94 3a 13 	call	0x2674	; 0x2674 <LCD_voidSendChar>
		LOC_u32Var /= 10;
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	ab 81       	ldd	r26, Y+3	; 0x03
    2a26:	bc 81       	ldd	r27, Y+4	; 0x04
    2a28:	2a e0       	ldi	r18, 0x0A	; 10
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <__udivmodsi4>
    2a38:	da 01       	movw	r26, r20
    2a3a:	c9 01       	movw	r24, r18
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	9a 83       	std	Y+2, r25	; 0x02
    2a40:	ab 83       	std	Y+3, r26	; 0x03
    2a42:	bc 83       	std	Y+4, r27	; 0x04
		LOC_u32Var+=( COPY_u32Number%10 );

		COPY_u32Number/=10;
	}

	while(LOC_u32Var > 1)
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	ab 81       	ldd	r26, Y+3	; 0x03
    2a4a:	bc 81       	ldd	r27, Y+4	; 0x04
    2a4c:	82 30       	cpi	r24, 0x02	; 2
    2a4e:	91 05       	cpc	r25, r1
    2a50:	a1 05       	cpc	r26, r1
    2a52:	b1 05       	cpc	r27, r1
    2a54:	a0 f6       	brcc	.-88     	; 0x29fe <LCD_voidSendNumber+0xd8>
	{
		LCD_voidSendChar( LOC_u32Var % 10 + 48);
		LOC_u32Var /= 10;
	}

}
    2a56:	28 96       	adiw	r28, 0x08	; 8
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <LCD_voidgoto>:

void LCD_voidgoto(u8 COPY_u8Row , u8 COPY_u8Col)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <LCD_voidgoto+0x6>
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	6a 83       	std	Y+2, r22	; 0x02

	if( COPY_u8Row == 1 )
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	81 30       	cpi	r24, 0x01	; 1
    2a7a:	29 f4       	brne	.+10     	; 0x2a86 <LCD_voidgoto+0x1e>
	{
		LCD_voidSendCommand( COPY_u8Col + 0x80 -1 );
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	81 58       	subi	r24, 0x81	; 129
    2a80:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_voidSendCommand>
    2a84:	07 c0       	rjmp	.+14     	; 0x2a94 <LCD_voidgoto+0x2c>
	}
	else if (COPY_u8Row == 2)
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	82 30       	cpi	r24, 0x02	; 2
    2a8a:	21 f4       	brne	.+8      	; 0x2a94 <LCD_voidgoto+0x2c>
	{
		LCD_voidSendCommand( COPY_u8Col + 0x64 + 0x80 -1 );
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	8d 51       	subi	r24, 0x1D	; 29
    2a90:	0e 94 cd 13 	call	0x279a	; 0x279a <LCD_voidSendCommand>
	}

}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <main>:

#include "MCAL/EXTI/EXT_interface.h"
#include "MCAL/DIO/DIO_interface.h"

int main(void)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	68 97       	sbiw	r28, 0x18	; 24
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    2ab2:	0e 94 44 0c 	call	0x1888	; 0x1888 <LCD_voidInit>
	SW_Type S1 ={ DIO_PortD , PIN2 , SW_Input_Pullup};
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	01 96       	adiw	r24, 0x01	; 1
    2aba:	9b 87       	std	Y+11, r25	; 0x0b
    2abc:	8a 87       	std	Y+10, r24	; 0x0a
    2abe:	e2 e9       	ldi	r30, 0x92	; 146
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	fd 87       	std	Y+13, r31	; 0x0d
    2ac4:	ec 87       	std	Y+12, r30	; 0x0c
    2ac6:	f3 e0       	ldi	r31, 0x03	; 3
    2ac8:	fe 87       	std	Y+14, r31	; 0x0e
    2aca:	ec 85       	ldd	r30, Y+12	; 0x0c
    2acc:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ace:	00 80       	ld	r0, Z
    2ad0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ad2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	9d 87       	std	Y+13, r25	; 0x0d
    2ad8:	8c 87       	std	Y+12, r24	; 0x0c
    2ada:	ea 85       	ldd	r30, Y+10	; 0x0a
    2adc:	fb 85       	ldd	r31, Y+11	; 0x0b
    2ade:	00 82       	st	Z, r0
    2ae0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ae4:	01 96       	adiw	r24, 0x01	; 1
    2ae6:	9b 87       	std	Y+11, r25	; 0x0b
    2ae8:	8a 87       	std	Y+10, r24	; 0x0a
    2aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aec:	91 50       	subi	r25, 0x01	; 1
    2aee:	9e 87       	std	Y+14, r25	; 0x0e
    2af0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2af2:	ee 23       	and	r30, r30
    2af4:	51 f7       	brne	.-44     	; 0x2aca <main+0x2c>
	SW_Type S2 ={ DIO_PortD , PIN3 , SW_Input_Pullup};
    2af6:	ce 01       	movw	r24, r28
    2af8:	04 96       	adiw	r24, 0x04	; 4
    2afa:	98 8b       	std	Y+16, r25	; 0x10
    2afc:	8f 87       	std	Y+15, r24	; 0x0f
    2afe:	ef e8       	ldi	r30, 0x8F	; 143
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	fa 8b       	std	Y+18, r31	; 0x12
    2b04:	e9 8b       	std	Y+17, r30	; 0x11
    2b06:	f3 e0       	ldi	r31, 0x03	; 3
    2b08:	fb 8b       	std	Y+19, r31	; 0x13
    2b0a:	e9 89       	ldd	r30, Y+17	; 0x11
    2b0c:	fa 89       	ldd	r31, Y+18	; 0x12
    2b0e:	00 80       	ld	r0, Z
    2b10:	89 89       	ldd	r24, Y+17	; 0x11
    2b12:	9a 89       	ldd	r25, Y+18	; 0x12
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	9a 8b       	std	Y+18, r25	; 0x12
    2b18:	89 8b       	std	Y+17, r24	; 0x11
    2b1a:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b1c:	f8 89       	ldd	r31, Y+16	; 0x10
    2b1e:	00 82       	st	Z, r0
    2b20:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b22:	98 89       	ldd	r25, Y+16	; 0x10
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	98 8b       	std	Y+16, r25	; 0x10
    2b28:	8f 87       	std	Y+15, r24	; 0x0f
    2b2a:	9b 89       	ldd	r25, Y+19	; 0x13
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	9b 8b       	std	Y+19, r25	; 0x13
    2b30:	eb 89       	ldd	r30, Y+19	; 0x13
    2b32:	ee 23       	and	r30, r30
    2b34:	51 f7       	brne	.-44     	; 0x2b0a <main+0x6c>
	SW_Type S3 ={ DIO_PortB , PIN2 , SW_Input_Pullup};
    2b36:	ce 01       	movw	r24, r28
    2b38:	07 96       	adiw	r24, 0x07	; 7
    2b3a:	9d 8b       	std	Y+21, r25	; 0x15
    2b3c:	8c 8b       	std	Y+20, r24	; 0x14
    2b3e:	ec e8       	ldi	r30, 0x8C	; 140
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	ff 8b       	std	Y+23, r31	; 0x17
    2b44:	ee 8b       	std	Y+22, r30	; 0x16
    2b46:	f3 e0       	ldi	r31, 0x03	; 3
    2b48:	f8 8f       	std	Y+24, r31	; 0x18
    2b4a:	ee 89       	ldd	r30, Y+22	; 0x16
    2b4c:	ff 89       	ldd	r31, Y+23	; 0x17
    2b4e:	00 80       	ld	r0, Z
    2b50:	8e 89       	ldd	r24, Y+22	; 0x16
    2b52:	9f 89       	ldd	r25, Y+23	; 0x17
    2b54:	01 96       	adiw	r24, 0x01	; 1
    2b56:	9f 8b       	std	Y+23, r25	; 0x17
    2b58:	8e 8b       	std	Y+22, r24	; 0x16
    2b5a:	ec 89       	ldd	r30, Y+20	; 0x14
    2b5c:	fd 89       	ldd	r31, Y+21	; 0x15
    2b5e:	00 82       	st	Z, r0
    2b60:	8c 89       	ldd	r24, Y+20	; 0x14
    2b62:	9d 89       	ldd	r25, Y+21	; 0x15
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	9d 8b       	std	Y+21, r25	; 0x15
    2b68:	8c 8b       	std	Y+20, r24	; 0x14
    2b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6c:	91 50       	subi	r25, 0x01	; 1
    2b6e:	98 8f       	std	Y+24, r25	; 0x18
    2b70:	e8 8d       	ldd	r30, Y+24	; 0x18
    2b72:	ee 23       	and	r30, r30
    2b74:	51 f7       	brne	.-44     	; 0x2b4a <main+0xac>
	SW_voidInit(S1);
    2b76:	69 81       	ldd	r22, Y+1	; 0x01
    2b78:	7a 81       	ldd	r23, Y+2	; 0x02
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	0e 94 12 0c 	call	0x1824	; 0x1824 <SW_voidInit>
	SW_voidInit(S2);
    2b80:	6c 81       	ldd	r22, Y+4	; 0x04
    2b82:	7d 81       	ldd	r23, Y+5	; 0x05
    2b84:	8e 81       	ldd	r24, Y+6	; 0x06
    2b86:	0e 94 12 0c 	call	0x1824	; 0x1824 <SW_voidInit>
	SW_voidInit(S3);
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	78 85       	ldd	r23, Y+8	; 0x08
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	0e 94 12 0c 	call	0x1824	; 0x1824 <SW_voidInit>

	EXT_voidEnable_EXT_0 ( Falling_Edge );
    2b94:	82 e0       	ldi	r24, 0x02	; 2
    2b96:	0e 94 63 06 	call	0xcc6	; 0xcc6 <EXT_voidEnable_EXT_0>
	EXT_voidEnable_EXT_1 ( Falling_Edge );
    2b9a:	82 e0       	ldi	r24, 0x02	; 2
    2b9c:	0e 94 d1 06 	call	0xda2	; 0xda2 <EXT_voidEnable_EXT_1>
	EXT_voidEnable_EXT_2 ( Falling_Edge );
    2ba0:	82 e0       	ldi	r24, 0x02	; 2
    2ba2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <EXT_voidEnable_EXT_2>

	GEI_voidEnable();
    2ba6:	0e 94 47 06 	call	0xc8e	; 0xc8e <GEI_voidEnable>
    2baa:	ff cf       	rjmp	.-2      	; 0x2baa <main+0x10c>

00002bac <__vector_1>:
	return 0;
}


ISR(EXT_INT0)
{
    2bac:	1f 92       	push	r1
    2bae:	0f 92       	push	r0
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	0f 92       	push	r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	2f 93       	push	r18
    2bb8:	3f 93       	push	r19
    2bba:	4f 93       	push	r20
    2bbc:	5f 93       	push	r21
    2bbe:	6f 93       	push	r22
    2bc0:	7f 93       	push	r23
    2bc2:	8f 93       	push	r24
    2bc4:	9f 93       	push	r25
    2bc6:	af 93       	push	r26
    2bc8:	bf 93       	push	r27
    2bca:	ef 93       	push	r30
    2bcc:	ff 93       	push	r31
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	2e 97       	sbiw	r28, 0x0e	; 14
    2bd8:	de bf       	out	0x3e, r29	; 62
    2bda:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClear();
    2bdc:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_voidClear>
	LCD_voidgoto(1,0);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_voidgoto>
	LCD_voidSendStr((u8 *)"I am EXTI 0");
    2be8:	80 e6       	ldi	r24, 0x60	; 96
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_voidSendStr>
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	aa ef       	ldi	r26, 0xFA	; 250
    2bf6:	b3 e4       	ldi	r27, 0x43	; 67
    2bf8:	8b 87       	std	Y+11, r24	; 0x0b
    2bfa:	9c 87       	std	Y+12, r25	; 0x0c
    2bfc:	ad 87       	std	Y+13, r26	; 0x0d
    2bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	4a ef       	ldi	r20, 0xFA	; 250
    2c0e:	54 e4       	ldi	r21, 0x44	; 68
    2c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	8f 83       	std	Y+7, r24	; 0x07
    2c1a:	98 87       	std	Y+8, r25	; 0x08
    2c1c:	a9 87       	std	Y+9, r26	; 0x09
    2c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c20:	6f 81       	ldd	r22, Y+7	; 0x07
    2c22:	78 85       	ldd	r23, Y+8	; 0x08
    2c24:	89 85       	ldd	r24, Y+9	; 0x09
    2c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	40 e8       	ldi	r20, 0x80	; 128
    2c2e:	5f e3       	ldi	r21, 0x3F	; 63
    2c30:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c34:	88 23       	and	r24, r24
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <__vector_1+0x96>
		__ticks = 1;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9e 83       	std	Y+6, r25	; 0x06
    2c3e:	8d 83       	std	Y+5, r24	; 0x05
    2c40:	3f c0       	rjmp	.+126    	; 0x2cc0 <__vector_1+0x114>
	else if (__tmp > 65535)
    2c42:	6f 81       	ldd	r22, Y+7	; 0x07
    2c44:	78 85       	ldd	r23, Y+8	; 0x08
    2c46:	89 85       	ldd	r24, Y+9	; 0x09
    2c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	3f ef       	ldi	r19, 0xFF	; 255
    2c4e:	4f e7       	ldi	r20, 0x7F	; 127
    2c50:	57 e4       	ldi	r21, 0x47	; 71
    2c52:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	4c f5       	brge	.+82     	; 0x2cac <__vector_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e2       	ldi	r20, 0x20	; 32
    2c68:	51 e4       	ldi	r21, 0x41	; 65
    2c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <__vector_1+0xf6>
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <__vector_1+0xe4>
    2c94:	9c 83       	std	Y+4, r25	; 0x04
    2c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca6:	00 97       	sbiw	r24, 0x00	; 0
    2ca8:	69 f7       	brne	.-38     	; 0x2c84 <__vector_1+0xd8>
    2caa:	14 c0       	rjmp	.+40     	; 0x2cd4 <__vector_1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cac:	6f 81       	ldd	r22, Y+7	; 0x07
    2cae:	78 85       	ldd	r23, Y+8	; 0x08
    2cb0:	89 85       	ldd	r24, Y+9	; 0x09
    2cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <__vector_1+0x120>
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2cd4:	2e 96       	adiw	r28, 0x0e	; 14
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	ff 91       	pop	r31
    2ce0:	ef 91       	pop	r30
    2ce2:	bf 91       	pop	r27
    2ce4:	af 91       	pop	r26
    2ce6:	9f 91       	pop	r25
    2ce8:	8f 91       	pop	r24
    2cea:	7f 91       	pop	r23
    2cec:	6f 91       	pop	r22
    2cee:	5f 91       	pop	r21
    2cf0:	4f 91       	pop	r20
    2cf2:	3f 91       	pop	r19
    2cf4:	2f 91       	pop	r18
    2cf6:	0f 90       	pop	r0
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	0f 90       	pop	r0
    2cfc:	1f 90       	pop	r1
    2cfe:	18 95       	reti

00002d00 <__vector_2>:

ISR(EXT_INT1)
{
    2d00:	1f 92       	push	r1
    2d02:	0f 92       	push	r0
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	0f 92       	push	r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	2f 93       	push	r18
    2d0c:	3f 93       	push	r19
    2d0e:	4f 93       	push	r20
    2d10:	5f 93       	push	r21
    2d12:	6f 93       	push	r22
    2d14:	7f 93       	push	r23
    2d16:	8f 93       	push	r24
    2d18:	9f 93       	push	r25
    2d1a:	af 93       	push	r26
    2d1c:	bf 93       	push	r27
    2d1e:	ef 93       	push	r30
    2d20:	ff 93       	push	r31
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	2e 97       	sbiw	r28, 0x0e	; 14
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClear();
    2d30:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_voidClear>
	LCD_voidgoto(1,1);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	61 e0       	ldi	r22, 0x01	; 1
    2d38:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_voidgoto>
	LCD_voidSendStr((u8 *)"I am EXTI 1");
    2d3c:	8c e6       	ldi	r24, 0x6C	; 108
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_voidSendStr>
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	aa ef       	ldi	r26, 0xFA	; 250
    2d4a:	b3 e4       	ldi	r27, 0x43	; 67
    2d4c:	8b 87       	std	Y+11, r24	; 0x0b
    2d4e:	9c 87       	std	Y+12, r25	; 0x0c
    2d50:	ad 87       	std	Y+13, r26	; 0x0d
    2d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	4a ef       	ldi	r20, 0xFA	; 250
    2d62:	54 e4       	ldi	r21, 0x44	; 68
    2d64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	8f 83       	std	Y+7, r24	; 0x07
    2d6e:	98 87       	std	Y+8, r25	; 0x08
    2d70:	a9 87       	std	Y+9, r26	; 0x09
    2d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d74:	6f 81       	ldd	r22, Y+7	; 0x07
    2d76:	78 85       	ldd	r23, Y+8	; 0x08
    2d78:	89 85       	ldd	r24, Y+9	; 0x09
    2d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	2c f4       	brge	.+10     	; 0x2d96 <__vector_2+0x96>
		__ticks = 1;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	9e 83       	std	Y+6, r25	; 0x06
    2d92:	8d 83       	std	Y+5, r24	; 0x05
    2d94:	3f c0       	rjmp	.+126    	; 0x2e14 <__vector_2+0x114>
	else if (__tmp > 65535)
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	3f ef       	ldi	r19, 0xFF	; 255
    2da2:	4f e7       	ldi	r20, 0x7F	; 127
    2da4:	57 e4       	ldi	r21, 0x47	; 71
    2da6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2daa:	18 16       	cp	r1, r24
    2dac:	4c f5       	brge	.+82     	; 0x2e00 <__vector_2+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e2       	ldi	r20, 0x20	; 32
    2dbc:	51 e4       	ldi	r21, 0x41	; 65
    2dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
    2dd6:	0f c0       	rjmp	.+30     	; 0x2df6 <__vector_2+0xf6>
    2dd8:	88 ec       	ldi	r24, 0xC8	; 200
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	9c 83       	std	Y+4, r25	; 0x04
    2dde:	8b 83       	std	Y+3, r24	; 0x03
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <__vector_2+0xe4>
    2de8:	9c 83       	std	Y+4, r25	; 0x04
    2dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dec:	8d 81       	ldd	r24, Y+5	; 0x05
    2dee:	9e 81       	ldd	r25, Y+6	; 0x06
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	69 f7       	brne	.-38     	; 0x2dd8 <__vector_2+0xd8>
    2dfe:	14 c0       	rjmp	.+40     	; 0x2e28 <__vector_2+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e00:	6f 81       	ldd	r22, Y+7	; 0x07
    2e02:	78 85       	ldd	r23, Y+8	; 0x08
    2e04:	89 85       	ldd	r24, Y+9	; 0x09
    2e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	9e 83       	std	Y+6, r25	; 0x06
    2e12:	8d 83       	std	Y+5, r24	; 0x05
    2e14:	8d 81       	ldd	r24, Y+5	; 0x05
    2e16:	9e 81       	ldd	r25, Y+6	; 0x06
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <__vector_2+0x120>
    2e24:	9a 83       	std	Y+2, r25	; 0x02
    2e26:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2e28:	2e 96       	adiw	r28, 0x0e	; 14
    2e2a:	de bf       	out	0x3e, r29	; 62
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	ff 91       	pop	r31
    2e34:	ef 91       	pop	r30
    2e36:	bf 91       	pop	r27
    2e38:	af 91       	pop	r26
    2e3a:	9f 91       	pop	r25
    2e3c:	8f 91       	pop	r24
    2e3e:	7f 91       	pop	r23
    2e40:	6f 91       	pop	r22
    2e42:	5f 91       	pop	r21
    2e44:	4f 91       	pop	r20
    2e46:	3f 91       	pop	r19
    2e48:	2f 91       	pop	r18
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	0f 90       	pop	r0
    2e50:	1f 90       	pop	r1
    2e52:	18 95       	reti

00002e54 <__vector_3>:

ISR(EXT_INT2)
{
    2e54:	1f 92       	push	r1
    2e56:	0f 92       	push	r0
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	0f 92       	push	r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	2f 93       	push	r18
    2e60:	3f 93       	push	r19
    2e62:	4f 93       	push	r20
    2e64:	5f 93       	push	r21
    2e66:	6f 93       	push	r22
    2e68:	7f 93       	push	r23
    2e6a:	8f 93       	push	r24
    2e6c:	9f 93       	push	r25
    2e6e:	af 93       	push	r26
    2e70:	bf 93       	push	r27
    2e72:	ef 93       	push	r30
    2e74:	ff 93       	push	r31
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
    2e7e:	2e 97       	sbiw	r28, 0x0e	; 14
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClear();
    2e84:	0e 94 89 14 	call	0x2912	; 0x2912 <LCD_voidClear>
	LCD_voidgoto(1,2);
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	62 e0       	ldi	r22, 0x02	; 2
    2e8c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_voidgoto>
	LCD_voidSendStr((u8 *)"I am EXTI 2");
    2e90:	88 e7       	ldi	r24, 0x78	; 120
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 60 14 	call	0x28c0	; 0x28c0 <LCD_voidSendStr>
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	aa ef       	ldi	r26, 0xFA	; 250
    2e9e:	b3 e4       	ldi	r27, 0x43	; 67
    2ea0:	8b 87       	std	Y+11, r24	; 0x0b
    2ea2:	9c 87       	std	Y+12, r25	; 0x0c
    2ea4:	ad 87       	std	Y+13, r26	; 0x0d
    2ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	4a ef       	ldi	r20, 0xFA	; 250
    2eb6:	54 e4       	ldi	r21, 0x44	; 68
    2eb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	8f 83       	std	Y+7, r24	; 0x07
    2ec2:	98 87       	std	Y+8, r25	; 0x08
    2ec4:	a9 87       	std	Y+9, r26	; 0x09
    2ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	40 e8       	ldi	r20, 0x80	; 128
    2ed6:	5f e3       	ldi	r21, 0x3F	; 63
    2ed8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2edc:	88 23       	and	r24, r24
    2ede:	2c f4       	brge	.+10     	; 0x2eea <__vector_3+0x96>
		__ticks = 1;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	3f c0       	rjmp	.+126    	; 0x2f68 <__vector_3+0x114>
	else if (__tmp > 65535)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	3f ef       	ldi	r19, 0xFF	; 255
    2ef6:	4f e7       	ldi	r20, 0x7F	; 127
    2ef8:	57 e4       	ldi	r21, 0x47	; 71
    2efa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2efe:	18 16       	cp	r1, r24
    2f00:	4c f5       	brge	.+82     	; 0x2f54 <__vector_3+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e2       	ldi	r20, 0x20	; 32
    2f10:	51 e4       	ldi	r21, 0x41	; 65
    2f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	bc 01       	movw	r22, r24
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	9e 83       	std	Y+6, r25	; 0x06
    2f28:	8d 83       	std	Y+5, r24	; 0x05
    2f2a:	0f c0       	rjmp	.+30     	; 0x2f4a <__vector_3+0xf6>
    2f2c:	88 ec       	ldi	r24, 0xC8	; 200
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	9c 83       	std	Y+4, r25	; 0x04
    2f32:	8b 83       	std	Y+3, r24	; 0x03
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <__vector_3+0xe4>
    2f3c:	9c 83       	std	Y+4, r25	; 0x04
    2f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	69 f7       	brne	.-38     	; 0x2f2c <__vector_3+0xd8>
    2f52:	14 c0       	rjmp	.+40     	; 0x2f7c <__vector_3+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
    2f68:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	9a 81       	ldd	r25, Y+2	; 0x02
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <__vector_3+0x120>
    2f78:	9a 83       	std	Y+2, r25	; 0x02
    2f7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2f7c:	2e 96       	adiw	r28, 0x0e	; 14
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	cf 91       	pop	r28
    2f84:	df 91       	pop	r29
    2f86:	ff 91       	pop	r31
    2f88:	ef 91       	pop	r30
    2f8a:	bf 91       	pop	r27
    2f8c:	af 91       	pop	r26
    2f8e:	9f 91       	pop	r25
    2f90:	8f 91       	pop	r24
    2f92:	7f 91       	pop	r23
    2f94:	6f 91       	pop	r22
    2f96:	5f 91       	pop	r21
    2f98:	4f 91       	pop	r20
    2f9a:	3f 91       	pop	r19
    2f9c:	2f 91       	pop	r18
    2f9e:	0f 90       	pop	r0
    2fa0:	0f be       	out	0x3f, r0	; 63
    2fa2:	0f 90       	pop	r0
    2fa4:	1f 90       	pop	r1
    2fa6:	18 95       	reti

00002fa8 <__mulsi3>:
    2fa8:	62 9f       	mul	r22, r18
    2faa:	d0 01       	movw	r26, r0
    2fac:	73 9f       	mul	r23, r19
    2fae:	f0 01       	movw	r30, r0
    2fb0:	82 9f       	mul	r24, r18
    2fb2:	e0 0d       	add	r30, r0
    2fb4:	f1 1d       	adc	r31, r1
    2fb6:	64 9f       	mul	r22, r20
    2fb8:	e0 0d       	add	r30, r0
    2fba:	f1 1d       	adc	r31, r1
    2fbc:	92 9f       	mul	r25, r18
    2fbe:	f0 0d       	add	r31, r0
    2fc0:	83 9f       	mul	r24, r19
    2fc2:	f0 0d       	add	r31, r0
    2fc4:	74 9f       	mul	r23, r20
    2fc6:	f0 0d       	add	r31, r0
    2fc8:	65 9f       	mul	r22, r21
    2fca:	f0 0d       	add	r31, r0
    2fcc:	99 27       	eor	r25, r25
    2fce:	72 9f       	mul	r23, r18
    2fd0:	b0 0d       	add	r27, r0
    2fd2:	e1 1d       	adc	r30, r1
    2fd4:	f9 1f       	adc	r31, r25
    2fd6:	63 9f       	mul	r22, r19
    2fd8:	b0 0d       	add	r27, r0
    2fda:	e1 1d       	adc	r30, r1
    2fdc:	f9 1f       	adc	r31, r25
    2fde:	bd 01       	movw	r22, r26
    2fe0:	cf 01       	movw	r24, r30
    2fe2:	11 24       	eor	r1, r1
    2fe4:	08 95       	ret

00002fe6 <__udivmodsi4>:
    2fe6:	a1 e2       	ldi	r26, 0x21	; 33
    2fe8:	1a 2e       	mov	r1, r26
    2fea:	aa 1b       	sub	r26, r26
    2fec:	bb 1b       	sub	r27, r27
    2fee:	fd 01       	movw	r30, r26
    2ff0:	0d c0       	rjmp	.+26     	; 0x300c <__udivmodsi4_ep>

00002ff2 <__udivmodsi4_loop>:
    2ff2:	aa 1f       	adc	r26, r26
    2ff4:	bb 1f       	adc	r27, r27
    2ff6:	ee 1f       	adc	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	a2 17       	cp	r26, r18
    2ffc:	b3 07       	cpc	r27, r19
    2ffe:	e4 07       	cpc	r30, r20
    3000:	f5 07       	cpc	r31, r21
    3002:	20 f0       	brcs	.+8      	; 0x300c <__udivmodsi4_ep>
    3004:	a2 1b       	sub	r26, r18
    3006:	b3 0b       	sbc	r27, r19
    3008:	e4 0b       	sbc	r30, r20
    300a:	f5 0b       	sbc	r31, r21

0000300c <__udivmodsi4_ep>:
    300c:	66 1f       	adc	r22, r22
    300e:	77 1f       	adc	r23, r23
    3010:	88 1f       	adc	r24, r24
    3012:	99 1f       	adc	r25, r25
    3014:	1a 94       	dec	r1
    3016:	69 f7       	brne	.-38     	; 0x2ff2 <__udivmodsi4_loop>
    3018:	60 95       	com	r22
    301a:	70 95       	com	r23
    301c:	80 95       	com	r24
    301e:	90 95       	com	r25
    3020:	9b 01       	movw	r18, r22
    3022:	ac 01       	movw	r20, r24
    3024:	bd 01       	movw	r22, r26
    3026:	cf 01       	movw	r24, r30
    3028:	08 95       	ret

0000302a <__prologue_saves__>:
    302a:	2f 92       	push	r2
    302c:	3f 92       	push	r3
    302e:	4f 92       	push	r4
    3030:	5f 92       	push	r5
    3032:	6f 92       	push	r6
    3034:	7f 92       	push	r7
    3036:	8f 92       	push	r8
    3038:	9f 92       	push	r9
    303a:	af 92       	push	r10
    303c:	bf 92       	push	r11
    303e:	cf 92       	push	r12
    3040:	df 92       	push	r13
    3042:	ef 92       	push	r14
    3044:	ff 92       	push	r15
    3046:	0f 93       	push	r16
    3048:	1f 93       	push	r17
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	ca 1b       	sub	r28, r26
    3054:	db 0b       	sbc	r29, r27
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	09 94       	ijmp

00003062 <__epilogue_restores__>:
    3062:	2a 88       	ldd	r2, Y+18	; 0x12
    3064:	39 88       	ldd	r3, Y+17	; 0x11
    3066:	48 88       	ldd	r4, Y+16	; 0x10
    3068:	5f 84       	ldd	r5, Y+15	; 0x0f
    306a:	6e 84       	ldd	r6, Y+14	; 0x0e
    306c:	7d 84       	ldd	r7, Y+13	; 0x0d
    306e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3070:	9b 84       	ldd	r9, Y+11	; 0x0b
    3072:	aa 84       	ldd	r10, Y+10	; 0x0a
    3074:	b9 84       	ldd	r11, Y+9	; 0x09
    3076:	c8 84       	ldd	r12, Y+8	; 0x08
    3078:	df 80       	ldd	r13, Y+7	; 0x07
    307a:	ee 80       	ldd	r14, Y+6	; 0x06
    307c:	fd 80       	ldd	r15, Y+5	; 0x05
    307e:	0c 81       	ldd	r16, Y+4	; 0x04
    3080:	1b 81       	ldd	r17, Y+3	; 0x03
    3082:	aa 81       	ldd	r26, Y+2	; 0x02
    3084:	b9 81       	ldd	r27, Y+1	; 0x01
    3086:	ce 0f       	add	r28, r30
    3088:	d1 1d       	adc	r29, r1
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	ed 01       	movw	r28, r26
    3096:	08 95       	ret

00003098 <_exit>:
    3098:	f8 94       	cli

0000309a <__stop_program>:
    309a:	ff cf       	rjmp	.-2      	; 0x309a <__stop_program>
